/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
/*
 * Copyright (c) 2011 Centre Tecnologic de Telecomunicacions de Catalunya (CTTC)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * Author: Marco Miozzo <marco.miozzo@cttc.es>
 */

#ifndef PW_PF_FF_MAC_SCHEDULER_H
#define PW_PF_FF_MAC_SCHEDULER_H

#include <ns3/lte-common.h>
#include <ns3/ff-mac-csched-sap.h>
#include <ns3/ff-mac-sched-sap.h>
#include <ns3/ff-mac-scheduler.h>
#include <vector>
#include <map>
#include <ns3/nstime.h>
#include <ns3/lte-amc.h>
#include <ns3/lte-ffr-sap.h>

// PW_EDIT
#include "pw-support.h"

// value for SINR outside the range defined by FF-API, used to indicate that there
// is no CQI for this element
#define NO_SINR -5000


#define HARQ_PROC_NUM 8
#define HARQ_DL_TIMEOUT 11

namespace ns3 {

static const int TransportBlockSizeTable [110][27] = {
  /* NPRB 001*/ { 16, 24, 32, 40, 56, 72, 88, 104, 120, 136, 144, 176, 208, 224, 256, 280, 328, 336, 376, 408, 440, 488, 520, 552, 584, 616, 712},
  /* NPRB 002*/ { 32, 56, 72, 104, 120, 144, 176, 224, 256, 296, 328, 376, 440, 488, 552, 600, 632, 696, 776, 840, 904, 1000, 1064, 1128, 1192, 1256, 1480},
  /* NPRB 003*/ { 56, 88, 144, 176, 208, 224, 256, 328, 392, 456, 504, 584, 680, 744, 840, 904, 968, 1064, 1160, 1288, 1384, 1480, 1608, 1736, 1800, 1864, 2216},
  /* NPRB 004*/ { 88, 144, 176, 208, 256, 328, 392, 472, 536, 616, 680, 776, 904, 1000, 1128, 1224, 1288, 1416, 1544, 1736, 1864, 1992, 2152, 2280, 2408, 2536, 2984},
  /* NPRB 005*/ { 120, 176, 208, 256, 328, 424, 504, 584, 680, 776, 872, 1000, 1128, 1256, 1416, 1544, 1608, 1800, 1992, 2152, 2344, 2472, 2664, 2856, 2984, 3112, 3752},
  /* NPRB 006*/ { 152, 208, 256, 328, 408, 504, 600, 712, 808, 936, 1032, 1192, 1352, 1544, 1736, 1800, 1928, 2152, 2344, 2600, 2792, 2984, 3240, 3496, 3624, 3752, 4392},
  /* NPRB 007*/ { 176, 224, 296, 392, 488, 600, 712, 840, 968, 1096, 1224, 1384, 1608, 1800, 1992, 2152, 2280, 2536, 2792, 2984, 3240, 3496, 3752, 4008, 4264, 4392, 5160},
  /* NPRB 008*/ { 208, 256, 328, 440, 552, 680, 808, 968, 1096, 1256, 1384, 1608, 1800, 2024, 2280, 2472, 2600, 2856, 3112, 3496, 3752, 4008, 4264, 4584, 4968, 5160, 5992},
  /* NPRB 009*/ { 224, 328, 376, 504, 632, 776, 936, 1096, 1256, 1416, 1544, 1800, 2024, 2280, 2600, 2728, 2984, 3240, 3624, 3880, 4136, 4584, 4776, 5160, 5544, 5736, 6712},
  /* NPRB 010*/ { 256, 344, 424, 568, 696, 872, 1032, 1224, 1384, 1544, 1736, 2024, 2280, 2536, 2856, 3112, 3240, 3624, 4008, 4264, 4584, 4968, 5352, 5736, 5992, 6200, 7480},
  /* NPRB 011*/ { 288, 376, 472, 616, 776, 968, 1128, 1320, 1544, 1736, 1928, 2216, 2472, 2856, 3112, 3368, 3624, 4008, 4392, 4776, 5160, 5544, 5992, 6200, 6712, 6968, 8248},
  /* NPRB 012*/ { 328, 424, 520, 680, 840, 1032, 1224, 1480, 1672, 1864, 2088, 2408, 2728, 3112, 3496, 3624, 3880, 4392, 4776, 5160, 5544, 5992, 6456, 6968, 7224, 7480, 8760},
  /* NPRB 013*/ { 344, 456, 568, 744, 904, 1128, 1352, 1608, 1800, 2024, 2280, 2600, 2984, 3368, 3752, 4008, 4264, 4776, 5160, 5544, 5992, 6456, 6968, 7480, 7992, 8248, 9528},
  /* NPRB 014*/ { 376, 488, 616, 808, 1000, 1224, 1480, 1672, 1928, 2216, 2472, 2792, 3240, 3624, 4008, 4264, 4584, 5160, 5544, 5992, 6456, 6968, 7480, 7992, 8504, 8760, 10296},
  /* NPRB 015*/ { 392, 520, 648, 872, 1064, 1320, 1544, 1800, 2088, 2344, 2664, 2984, 3368, 3880, 4264, 4584, 4968, 5352, 5992, 6456, 6968, 7480, 7992, 8504, 9144, 9528, 11064},
  /* NPRB 016*/ { 424, 568, 696, 904, 1128, 1384, 1672, 1928, 2216, 2536, 2792, 3240, 3624, 4136, 4584, 4968, 5160, 5736, 6200, 6968, 7480, 7992, 8504, 9144, 9912, 10296, 11832},
  /* NPRB 017*/ { 456, 600, 744, 968, 1192, 1480, 1736, 2088, 2344, 2664, 2984, 3496, 3880, 4392, 4968, 5160, 5544, 6200, 6712, 7224, 7992, 8504, 9144, 9912, 10296, 10680, 12576},
  /* NPRB 018*/ { 488, 632, 776, 1032, 1288, 1544, 1864, 2216, 2536, 2856, 3112, 3624, 4136, 4584, 5160, 5544, 5992, 6456, 7224, 7736, 8248, 9144, 9528, 10296, 11064, 11448, 13536},
  /* NPRB 019*/ { 504, 680, 840, 1096, 1352, 1672, 1992, 2344, 2664, 2984, 3368, 3880, 4392, 4968, 5544, 5736, 6200, 6712, 7480, 8248, 8760, 9528, 10296, 11064, 11448, 12216, 14112},
  /* NPRB 020*/ { 536, 712, 872, 1160, 1416, 1736, 2088, 2472, 2792, 3112, 3496, 4008, 4584, 5160, 5736, 6200, 6456, 7224, 7992, 8504, 9144, 9912, 10680, 11448, 12216, 12576, 14688},
  /* NPRB 021*/ { 568, 744, 936, 1224, 1480, 1864, 2216, 2536, 2984, 3368, 3752, 4264, 4776, 5352, 5992, 6456, 6712, 7480, 8248, 9144, 9912, 10680, 11448, 12216, 12960, 13536, 15264},
  /* NPRB 022*/ { 600, 776, 968, 1256, 1544, 1928, 2280, 2664, 3112, 3496, 3880, 4392, 4968, 5736, 6200, 6712, 7224, 7992, 8760, 9528, 10296, 11064, 11832, 12576, 13536, 14112, 16416},
  /* NPRB 023*/ { 616, 808, 1000, 1320, 1608, 2024, 2408, 2792, 3240, 3624, 4008, 4584, 5352, 5992, 6456, 6968, 7480, 8248, 9144, 9912, 10680, 11448, 12576, 12960, 14112, 14688, 16992},
  /* NPRB 024*/ { 648, 872, 1064, 1384, 1736, 2088, 2472, 2984, 3368, 3752, 4264, 4776, 5544, 6200, 6968, 7224, 7736, 8760, 9528, 10296, 11064, 12216, 12960, 13536, 14688, 15264, 17568},
  /* NPRB 025*/ { 680, 904, 1096, 1416, 1800, 2216, 2600, 3112, 3496, 4008, 4392, 4968, 5736, 6456, 7224, 7736, 7992, 9144, 9912, 10680, 11448, 12576, 13536, 14112, 15264, 15840, 18336},
  /* NPRB 026*/ { 712, 936, 1160, 1480, 1864, 2280, 2728, 3240, 3624, 4136, 4584, 5352, 5992, 6712, 7480, 7992, 8504, 9528, 10296, 11064, 12216, 12960, 14112, 14688, 15840, 16416, 19080},
  /* NPRB 027*/ { 744, 968, 1192, 1544, 1928, 2344, 2792, 3368, 3752, 4264, 4776, 5544, 6200, 6968, 7736, 8248, 8760, 9912, 10680, 11448, 12576, 13536, 14688, 15264, 16416, 16992, 19848},
  /* NPRB 028*/ { 776, 1000, 1256, 1608, 1992, 2472, 2984, 3368, 3880, 4392, 4968, 5736, 6456, 7224, 7992, 8504, 9144, 10296, 11064, 12216, 12960, 14112, 15264, 15840, 16992, 17568, 20616},
  /* NPRB 029*/ { 776, 1032, 1288, 1672, 2088, 2536, 2984, 3496, 4008, 4584, 5160, 5992, 6712, 7480, 8248, 8760, 9528, 10296, 11448, 12576, 13536, 14688, 15840, 16416, 17568, 18336, 21384},
  /* NPRB 030*/ { 808, 1064, 1320, 1736, 2152, 2664, 3112, 3624, 4264, 4776, 5352, 5992, 6712, 7736, 8504, 9144, 9912, 10680, 11832, 12960, 14112, 15264, 16416, 16992, 18336, 19080, 22152},
  /* NPRB 031*/ { 840, 1128, 1384, 1800, 2216, 2728, 3240, 3752, 4392, 4968, 5544, 6200, 6968, 7992, 8760, 9528, 9912, 11064, 12216, 13536, 14688, 15840, 16992, 17568, 19080, 19848, 22920},
  /* NPRB 032*/ { 872, 1160, 1416, 1864, 2280, 2792, 3368, 3880, 4584, 5160, 5736, 6456, 7224, 8248, 9144, 9912, 10296, 11448, 12576, 13536, 14688, 15840, 16992, 18336, 19848, 20616, 23688},
  /* NPRB 033*/ { 904, 1192, 1480, 1928, 2344, 2856, 3496, 4008, 4584, 5160, 5736, 6712, 7480, 8504, 9528, 10296, 10680, 11832, 12960, 14112, 15264, 16416, 17568, 19080, 19848, 20616, 24496},
  /* NPRB 034*/ { 936, 1224, 1544, 1992, 2408, 2984, 3496, 4136, 4776, 5352, 5992, 6968, 7736, 8760, 9912, 10296, 11064, 12216, 13536, 14688, 15840, 16992, 18336, 19848, 20616, 21384, 25456},
  /* NPRB 035*/ { 968, 1256, 1544, 2024, 2472, 3112, 3624, 4264, 4968, 5544, 6200, 6968, 7992, 9144, 9912, 10680, 11448, 12576, 14112, 15264, 16416, 17568, 19080, 19848, 21384, 22152, 25456},
  /* NPRB 036*/ { 1000, 1288, 1608, 2088, 2600, 3112, 3752, 4392, 4968, 5736, 6200, 7224, 8248, 9144, 10296, 11064, 11832, 12960, 14112, 15264, 16992, 18336, 19080, 20616, 22152, 22920, 26416},
  /* NPRB 037*/ { 1032, 1352, 1672, 2152, 2664, 3240, 3880, 4584, 5160, 5736, 6456, 7480, 8504, 9528, 10680, 11448, 12216, 13536, 14688, 15840, 16992, 18336, 19848, 21384, 22920, 23688, 27376},
  /* NPRB 038*/ { 1032, 1384, 1672, 2216, 2728, 3368, 4008, 4584, 5352, 5992, 6712, 7736, 8760, 9912, 11064, 11832, 12216, 13536, 15264, 16416, 17568, 19080, 20616, 22152, 22920, 24496, 28336},
  /* NPRB 039*/ { 1064, 1416, 1736, 2280, 2792, 3496, 4136, 4776, 5544, 6200, 6712, 7736, 8760, 9912, 11064, 11832, 12576, 14112, 15264, 16992, 18336, 19848, 21384, 22152, 23688, 24496, 29296},
  /* NPRB 040*/ { 1096, 1416, 1800, 2344, 2856, 3496, 4136, 4968, 5544, 6200, 6968, 7992, 9144, 10296, 11448, 12216, 12960, 14688, 15840, 16992, 18336, 19848, 21384, 22920, 24496, 25456, 29296},
  /* NPRB 041*/ { 1128, 1480, 1800, 2408, 2984, 3624, 4264, 4968, 5736, 6456, 7224, 8248, 9528, 10680, 11832, 12576, 13536, 14688, 16416, 17568, 19080, 20616, 22152, 23688, 25456, 26416, 30576},
  /* NPRB 042*/ { 1160, 1544, 1864, 2472, 2984, 3752, 4392, 5160, 5992, 6712, 7480, 8504, 9528, 10680, 12216, 12960, 13536, 15264, 16416, 18336, 19848, 21384, 22920, 24496, 25456, 26416, 30576},
  /* NPRB 043*/ { 1192, 1544, 1928, 2536, 3112, 3752, 4584, 5352, 5992, 6712, 7480, 8760, 9912, 11064, 12216, 12960, 14112, 15264, 16992, 18336, 19848, 21384, 22920, 24496, 26416, 27376, 31704},
  /* NPRB 044*/ { 1224, 1608, 1992, 2536, 3112, 3880, 4584, 5352, 6200, 6968, 7736, 8760, 9912, 11448, 12576, 13536, 14112, 15840, 17568, 19080, 20616, 22152, 23688, 25456, 26416, 28336, 32856},
  /* NPRB 045*/ { 1256, 1608, 2024, 2600, 3240, 4008, 4776, 5544, 6200, 6968, 7992, 9144, 10296, 11448, 12960, 13536, 14688, 16416, 17568, 19080, 20616, 22920, 24496, 25456, 27376, 28336, 32856},
  /* NPRB 046*/ { 1256, 1672, 2088, 2664, 3240, 4008, 4776, 5736, 6456, 7224, 7992, 9144, 10680, 11832, 12960, 14112, 14688, 16416, 18336, 19848, 21384, 22920, 24496, 26416, 28336, 29296, 34008},
  /* NPRB 047*/ { 1288, 1736, 2088, 2728, 3368, 4136, 4968, 5736, 6456, 7480, 8248, 9528, 10680, 12216, 13536, 14688, 15264, 16992, 18336, 20616, 22152, 23688, 25456, 27376, 28336, 29296, 35160},
  /* NPRB 048*/ { 1320, 1736, 2152, 2792, 3496, 4264, 4968, 5992, 6712, 7480, 8504, 9528, 11064, 12216, 13536, 14688, 15840, 17568, 19080, 20616, 22152, 24496, 25456, 27376, 29296, 30576, 35160},
  /* NPRB 049*/ { 1352, 1800, 2216, 2856, 3496, 4392, 5160, 5992, 6968, 7736, 8504, 9912, 11064, 12576, 14112, 15264, 15840, 17568, 19080, 21384, 22920, 24496, 26416, 28336, 29296, 31704, 36696},
  /* NPRB 050*/ { 1384, 1800, 2216, 2856, 3624, 4392, 5160, 6200, 6968, 7992, 8760, 9912, 11448, 12960, 14112, 15264, 16416, 18336, 19848, 21384, 22920, 25456, 27376, 28336, 30576, 31704, 36696},
  /* NPRB 051*/ { 1416, 1864, 2280, 2984, 3624, 4584, 5352, 6200, 7224, 7992, 9144, 10296, 11832, 12960, 14688, 15840, 16416, 18336, 19848, 22152, 23688, 25456, 27376, 29296, 31704, 32856, 37888},
  /* NPRB 052*/ { 1416, 1864, 2344, 2984, 3752, 4584, 5352, 6456, 7224, 8248, 9144, 10680, 11832, 13536, 14688, 15840, 16992, 19080, 20616, 22152, 24496, 26416, 28336, 29296, 31704, 32856, 37888},
  /* NPRB 053*/ { 1480, 1928, 2344, 3112, 3752, 4776, 5544, 6456, 7480, 8248, 9144, 10680, 12216, 13536, 15264, 16416, 16992, 19080, 21384, 22920, 24496, 26416, 28336, 30576, 32856, 34008, 39232},
  /* NPRB 054*/ { 1480, 1992, 2408, 3112, 3880, 4776, 5736, 6712, 7480, 8504, 9528, 11064, 12216, 14112, 15264, 16416, 17568, 19848, 21384, 22920, 25456, 27376, 29296, 30576, 32856, 34008, 40576},
  /* NPRB 055*/ { 1544, 1992, 2472, 3240, 4008, 4776, 5736, 6712, 7736, 8760, 9528, 11064, 12576, 14112, 15840, 16992, 17568, 19848, 22152, 23688, 25456, 27376, 29296, 31704, 34008, 35160, 40576},
  /* NPRB 056*/ { 1544, 2024, 2536, 3240, 4008, 4968, 5992, 6712, 7736, 8760, 9912, 11448, 12576, 14688, 15840, 16992, 18336, 20616, 22152, 24496, 26416, 28336, 30576, 31704, 34008, 35160, 40576},
  /* NPRB 057*/ { 1608, 2088, 2536, 3368, 4136, 4968, 5992, 6968, 7992, 9144, 9912, 11448, 12960, 14688, 16416, 17568, 18336, 20616, 22920, 24496, 26416, 28336, 30576, 32856, 35160, 36696, 42368},
  /* NPRB 058*/ { 1608, 2088, 2600, 3368, 4136, 5160, 5992, 6968, 7992, 9144, 10296, 11832, 12960, 14688, 16416, 17568, 19080, 20616, 22920, 25456, 27376, 29296, 31704, 32856, 35160, 36696, 42368},
  /* NPRB 059*/ { 1608, 2152, 2664, 3496, 4264, 5160, 6200, 7224, 8248, 9144, 10296, 11832, 13536, 15264, 16992, 18336, 19080, 21384, 23688, 25456, 27376, 29296, 31704, 34008, 36696, 37888, 43816},
  /* NPRB 060*/ { 1672, 2152, 2664, 3496, 4264, 5352, 6200, 7224, 8504, 9528, 10680, 12216, 13536, 15264, 16992, 18336, 19848, 21384, 23688, 25456, 28336, 30576, 32856, 34008, 36696, 37888, 43816},
  /* NPRB 061*/ { 1672, 2216, 2728, 3624, 4392, 5352, 6456, 7480, 8504, 9528, 10680, 12216, 14112, 15840, 17568, 18336, 19848, 22152, 24496, 26416, 28336, 30576, 32856, 35160, 36696, 39232, 45352},
  /* NPRB 062*/ { 1736, 2280, 2792, 3624, 4392, 5544, 6456, 7480, 8760, 9912, 11064, 12576, 14112, 15840, 17568, 19080, 19848, 22152, 24496, 26416, 29296, 31704, 34008, 35160, 37888, 39232, 45352},
  /* NPRB 063*/ { 1736, 2280, 2856, 3624, 4584, 5544, 6456, 7736, 8760, 9912, 11064, 12576, 14112, 16416, 18336, 19080, 20616, 22920, 24496, 27376, 29296, 31704, 34008, 36696, 37888, 40576, 46888},
  /* NPRB 064*/ { 1800, 2344, 2856, 3752, 4584, 5736, 6712, 7736, 9144, 10296, 11448, 12960, 14688, 16416, 18336, 19848, 20616, 22920, 25456, 27376, 29296, 31704, 34008, 36696, 39232, 40576, 46888},
  /* NPRB 065*/ { 1800, 2344, 2856, 3752, 4584, 5736, 6712, 7992, 9144, 10296, 11448, 12960, 14688, 16992, 18336, 19848, 21384, 23688, 25456, 28336, 30576, 32856, 35160, 37888, 39232, 40576, 48936},
  /* NPRB 066*/ { 1800, 2408, 2984, 3880, 4776, 5736, 6968, 7992, 9144, 10296, 11448, 13536, 15264, 16992, 19080, 20616, 21384, 23688, 26416, 28336, 30576, 32856, 35160, 37888, 40576, 42368, 48936},
  /* NPRB 067*/ { 1864, 2472, 2984, 3880, 4776, 5992, 6968, 8248, 9528, 10680, 11832, 13536, 15264, 16992, 19080, 20616, 22152, 24496, 26416, 29296, 31704, 34008, 36696, 37888, 40576, 42368, 48936},
  /* NPRB 068*/ { 1864, 2472, 3112, 4008, 4968, 5992, 6968, 8248, 9528, 10680, 11832, 13536, 15264, 17568, 19848, 20616, 22152, 24496, 27376, 29296, 31704, 34008, 36696, 39232, 42368, 43816, 51024},
  /* NPRB 069*/ { 1928, 2536, 3112, 4008, 4968, 5992, 7224, 8504, 9528, 11064, 12216, 14112, 15840, 17568, 19848, 21384, 22152, 24496, 27376, 29296, 31704, 35160, 36696, 39232, 42368, 43816, 51024},
  /* NPRB 070*/ { 1928, 2536, 3112, 4136, 4968, 6200, 7224, 8504, 9912, 11064, 12216, 14112, 15840, 18336, 19848, 21384, 22920, 25456, 27376, 30576, 32856, 35160, 37888, 40576, 42368, 43816, 52752},
  /* NPRB 071*/ { 1992, 2600, 3240, 4136, 5160, 6200, 7480, 8760, 9912, 11064, 12576, 14112, 16416, 18336, 20616, 22152, 22920, 25456, 28336, 30576, 32856, 35160, 37888, 40576, 43816, 45352, 52752},
  /* NPRB 072*/ { 1992, 2600, 3240, 4264, 5160, 6200, 7480, 8760, 9912, 11448, 12576, 14688, 16416, 18336, 20616, 22152, 23688, 26416, 28336, 30576, 34008, 36696, 39232, 40576, 43816, 45352, 52752},
  /* NPRB 073*/ { 2024, 2664, 3240, 4264, 5160, 6456, 7736, 8760, 10296, 11448, 12960, 14688, 16416, 19080, 20616, 22152, 23688, 26416, 29296, 31704, 34008, 36696, 39232, 42368, 45352, 46888, 55056},
  /* NPRB 074*/ { 2088, 2728, 3368, 4392, 5352, 6456, 7736, 9144, 10296, 11832, 12960, 14688, 16992, 19080, 21384, 22920, 24496, 26416, 29296, 31704, 34008, 36696, 40576, 42368, 45352, 46888, 55056},
  /* NPRB 075*/ { 2088, 2728, 3368, 4392, 5352, 6712, 7736, 9144, 10680, 11832, 12960, 15264, 16992, 19080, 21384, 22920, 24496, 27376, 29296, 32856, 35160, 37888, 40576, 43816, 45352, 46888, 55056},
  /* NPRB 076*/ { 2088, 2792, 3368, 4392, 5544, 6712, 7992, 9144, 10680, 11832, 13536, 15264, 17568, 19848, 22152, 23688, 24496, 27376, 30576, 32856, 35160, 37888, 40576, 43816, 46888, 48936, 55056},
  /* NPRB 077*/ { 2152, 2792, 3496, 4584, 5544, 6712, 7992, 9528, 10680, 12216, 13536, 15840, 17568, 19848, 22152, 23688, 25456, 27376, 30576, 32856, 35160, 39232, 42368, 43816, 46888, 48936, 57336},
  /* NPRB 078*/ { 2152, 2856, 3496, 4584, 5544, 6968, 8248, 9528, 11064, 12216, 13536, 15840, 17568, 19848, 22152, 23688, 25456, 28336, 30576, 34008, 36696, 39232, 42368, 45352, 46888, 48936, 57336},
  /* NPRB 079*/ { 2216, 2856, 3496, 4584, 5736, 6968, 8248, 9528, 11064, 12576, 14112, 15840, 18336, 20616, 22920, 24496, 25456, 28336, 31704, 34008, 36696, 39232, 42368, 45352, 48936, 51024, 57336},
  /* NPRB 080*/ { 2216, 2856, 3624, 4776, 5736, 6968, 8248, 9912, 11064, 12576, 14112, 16416, 18336, 20616, 22920, 24496, 26416, 29296, 31704, 34008, 36696, 40576, 43816, 45352, 48936, 51024, 59256},
  /* NPRB 081*/ { 2280, 2984, 3624, 4776, 5736, 7224, 8504, 9912, 11448, 12960, 14112, 16416, 18336, 20616, 22920, 24496, 26416, 29296, 31704, 35160, 37888, 40576, 43816, 46888, 48936, 51024, 59256},
  /* NPRB 082*/ { 2280, 2984, 3624, 4776, 5992, 7224, 8504, 9912, 11448, 12960, 14688, 16416, 19080, 21384, 23688, 25456, 26416, 29296, 32856, 35160, 37888, 40576, 43816, 46888, 51024, 52752, 59256},
  /* NPRB 083*/ { 2280, 2984, 3752, 4776, 5992, 7224, 8760, 10296, 11448, 12960, 14688, 16992, 19080, 21384, 23688, 25456, 27376, 30576, 32856, 35160, 39232, 42368, 45352, 46888, 51024, 52752, 61664},
  /* NPRB 084*/ { 2344, 3112, 3752, 4968, 5992, 7480, 8760, 10296, 11832, 13536, 14688, 16992, 19080, 21384, 24496, 25456, 27376, 30576, 32856, 36696, 39232, 42368, 45352, 48936, 51024, 52752, 61664},
  /* NPRB 085*/ { 2344, 3112, 3880, 4968, 5992, 7480, 8760, 10296, 11832, 13536, 14688, 16992, 19080, 22152, 24496, 26416, 27376, 30576, 34008, 36696, 39232, 42368, 45352, 48936, 52752, 55056, 61664},
  /* NPRB 086*/ { 2408, 3112, 3880, 4968, 6200, 7480, 9144, 10680, 12216, 13536, 15264, 17568, 19848, 22152, 24496, 26416, 28336, 30576, 34008, 36696, 40576, 43816, 46888, 48936, 52752, 55056, 63776},
  /* NPRB 087*/ { 2408, 3240, 3880, 5160, 6200, 7736, 9144, 10680, 12216, 13536, 15264, 17568, 19848, 22152, 25456, 26416, 28336, 31704, 34008, 37888, 40576, 43816, 46888, 51024, 52752, 55056, 63776},
  /* NPRB 088*/ { 2472, 3240, 4008, 5160, 6200, 7736, 9144, 10680, 12216, 14112, 15264, 17568, 19848, 22920, 25456, 27376, 28336, 31704, 35160, 37888, 40576, 43816, 46888, 51024, 52752, 55056, 63776},
  /* NPRB 089*/ { 2472, 3240, 4008, 5160, 6456, 7736, 9144, 11064, 12576, 14112, 15840, 18336, 20616, 22920, 25456, 27376, 29296, 31704, 35160, 37888, 42368, 45352, 48936, 51024, 55056, 57336, 66592},
  /* NPRB 090*/ { 2536, 3240, 4008, 5352, 6456, 7992, 9528, 11064, 12576, 14112, 15840, 18336, 20616, 22920, 25456, 27376, 29296, 32856, 35160, 39232, 42368, 45352, 48936, 51024, 55056, 57336, 66592},
  /* NPRB 091*/ { 2536, 3368, 4136, 5352, 6456, 7992, 9528, 11064, 12576, 14112, 15840, 18336, 20616, 23688, 26416, 28336, 29296, 32856, 36696, 39232, 42368, 45352, 48936, 52752, 55056, 57336, 66592},
  /* NPRB 092*/ { 2536, 3368, 4136, 5352, 6456, 7992, 9528, 11448, 12960, 14688, 16416, 18336, 21384, 23688, 26416, 28336, 30576, 32856, 36696, 39232, 42368, 46888, 48936, 52752, 57336, 59256, 68808},
  /* NPRB 093*/ { 2600, 3368, 4136, 5352, 6712, 8248, 9528, 11448, 12960, 14688, 16416, 19080, 21384, 23688, 26416, 28336, 30576, 34008, 36696, 40576, 43816, 46888, 51024, 52752, 57336, 59256, 68808},
  /* NPRB 094*/ { 2600, 3496, 4264, 5544, 6712, 8248, 9912, 11448, 12960, 14688, 16416, 19080, 21384, 24496, 27376, 29296, 30576, 34008, 37888, 40576, 43816, 46888, 51024, 55056, 57336, 59256, 68808},
  /* NPRB 095*/ { 2664, 3496, 4264, 5544, 6712, 8248, 9912, 11448, 13536, 15264, 16992, 19080, 21384, 24496, 27376, 29296, 30576, 34008, 37888, 40576, 43816, 46888, 51024, 55056, 57336, 61664, 71112},
  /* NPRB 096*/ { 2664, 3496, 4264, 5544, 6968, 8504, 9912, 11832, 13536, 15264, 16992, 19080, 22152, 24496, 27376, 29296, 31704, 35160, 37888, 40576, 45352, 48936, 51024, 55056, 59256, 61664, 71112},
  /* NPRB 097*/ { 2728, 3496, 4392, 5736, 6968, 8504, 10296, 11832, 13536, 15264, 16992, 19848, 22152, 25456, 28336, 29296, 31704, 35160, 37888, 42368, 45352, 48936, 52752, 55056, 59256, 61664, 71112},
  /* NPRB 098*/ { 2728, 3624, 4392, 5736, 6968, 8760, 10296, 11832, 13536, 15264, 16992, 19848, 22152, 25456, 28336, 30576, 31704, 35160, 39232, 42368, 45352, 48936, 52752, 57336, 59256, 61664, 73712},
  /* NPRB 099*/ { 2728, 3624, 4392, 5736, 6968, 8760, 10296, 12216, 14112, 15840, 17568, 19848, 22920, 25456, 28336, 30576, 31704, 35160, 39232, 42368, 46888, 48936, 52752, 57336, 61664, 63776, 73712},
  /* NPRB 100*/ { 2792, 3624, 4584, 5736, 7224, 8760, 10296, 12216, 14112, 15840, 17568, 19848, 22920, 25456, 28336, 30576, 32856, 36696, 39232, 43816, 46888, 51024, 55056, 57336, 61664, 63776, 75376},
  /* NPRB 101*/ { 2792, 3752, 4584, 5992, 7224, 8760, 10680, 12216, 14112, 15840, 17568, 20616, 22920, 26416, 29296, 30576, 32856, 36696, 40576, 43816, 46888, 51024, 55056, 57336, 61664, 63776, 75376},
  /* NPRB 102*/ { 2856, 3752, 4584, 5992, 7224, 9144, 10680, 12576, 14112, 16416, 18336, 20616, 23688, 26416, 29296, 31704, 32856, 36696, 40576, 43816, 46888, 51024, 55056, 59256, 61664, 63776, 75376},
  /* NPRB 103*/ { 2856, 3752, 4584, 5992, 7480, 9144, 10680, 12576, 14688, 16416, 18336, 20616, 23688, 26416, 29296, 31704, 34008, 36696, 40576, 43816, 48936, 51024, 55056, 59256, 63776, 66592, 75376},
  /* NPRB 104*/ { 2856, 3752, 4584, 5992, 7480, 9144, 10680, 12576, 14688, 16416, 18336, 21384, 23688, 26416, 29296, 31704, 34008, 37888, 40576, 45352, 48936, 52752, 57336, 59256, 63776, 66592, 75376},
  /* NPRB 105*/ { 2984, 3880, 4776, 6200, 7480, 9144, 11064, 12960, 14688, 16416, 18336, 21384, 23688, 27376, 30576, 31704, 34008, 37888, 42368, 45352, 48936, 52752, 57336, 59256, 63776, 66592, 75376},
  /* NPRB 106*/ { 2984, 3880, 4776, 6200, 7480, 9528, 11064, 12960, 14688, 16992, 18336, 21384, 24496, 27376, 30576, 32856, 34008, 37888, 42368, 45352, 48936, 52752, 57336, 61664, 63776, 66592, 75376},
  /* NPRB 107*/ { 2984, 3880, 4776, 6200, 7736, 9528, 11064, 12960, 15264, 16992, 19080, 21384, 24496, 27376, 30576, 32856, 35160, 39232, 42368, 46888, 48936, 52752, 57336, 61664, 66592, 68808, 75376},
  /* NPRB 108*/ { 2984, 4008, 4776, 6200, 7736, 9528, 11448, 12960, 15264, 16992, 19080, 22152, 24496, 27376, 30576, 32856, 35160, 39232, 42368, 46888, 51024, 55056, 59256, 61664, 66592, 68808, 75376},
  /* NPRB 109*/ { 2984, 4008, 4968, 6456, 7736, 9528, 11448, 13536, 15264, 16992, 19080, 22152, 24496, 28336, 31704, 34008, 35160, 39232, 43816, 46888, 51024, 55056, 59256, 61664, 66592, 68808, 75376},
  /* NPRB 110*/ { 3112, 4008, 4968, 6456, 7992, 9528, 11448, 13536, 15264, 17568, 19080, 22152, 25456, 28336, 31704, 34008, 35160, 39232, 43816, 46888, 51024, 55056, 59256, 63776, 66592, 71112, 75376}
};

typedef std::vector < uint8_t > DlHarqProcessesStatus_t;
typedef std::vector < uint8_t > DlHarqProcessesTimer_t;
typedef std::vector < DlDciListElement_s > DlHarqProcessesDciBuffer_t;
typedef std::vector < std::vector <struct RlcPduListElement_s> > RlcPduList_t; // vector of the LCs and layers per UE
typedef std::vector < RlcPduList_t > DlHarqRlcPduListBuffer_t; // vector of the 8 HARQ processes per UE

typedef std::vector < UlDciListElement_s > UlHarqProcessesDciBuffer_t;
typedef std::vector < uint8_t > UlHarqProcessesStatus_t;

#define TP_FACTOR  			PWCONFIG_PWSCHEDULER_TP_FACTOR
#define FAIRNESS_FACTOR  	PWCONFIG_PWSCHEDULER_FAIRNESS_FACTOR

#define MAX_FACTOR_LVLS 11

/***** FAIRNESS FACTOR ****/
/* VFT Modification */
#define RG_SCH_PFS_FAIR_FACTOR_0_UL {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}
#define RG_SCH_PFS_FAIR_FACTOR_1_UL {0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25}
#define RG_SCH_PFS_FAIR_FACTOR_2_UL {0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,28,28,28}
#define RG_SCH_PFS_FAIR_FACTOR_3_UL {0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31}
#define RG_SCH_PFS_FAIR_FACTOR_4_UL {0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,9,9,9,9,9,9,9,10,10,10,10,10,10,10,11,11,11,11,11,11,11,12,12,12,12,12,12,12,13,13,13,13,13,13,13,14,14,14,14,14,14,14,15,15,15,15,15,15,15,16,16,16,16,16,16,16,17,17,17,17,17,17,17,18,18,18,18,18,18,18,19,19,19,19,19,19,19,20,20,20,20,20,20,20,21,21,21,21,21,21,21,22,22,22,22,22,22,22,23,23,23,23,23,23,23,24,24,24,24,24,24,24,25,25,25,25,25,25,25,26,26,26,26,26,26,26,27,27,27,27,27,27,27,28,28,28,28,28,28,28,29,29,29,29,29,29,29,30,30,30,30,30,30,30,31,31,31,31,31,31,31,32,32,32,32,32,32,32,33,33,33,33,33,33,33,34,34,34,34,34,34,34,35,35,35,35,35,35,35,36,36,36}
#define RG_SCH_PFS_FAIR_FACTOR_5_UL {0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4,4,5,5,5,5,5,5,6,6,6,6,6,6,7,7,7,7,7,7,8,8,8,8,8,8,9,9,9,9,9,9,10,10,10,10,10,10,11,11,11,11,11,11,12,12,12,12,12,12,13,13,13,13,13,13,14,14,14,14,14,14,15,15,15,15,15,15,16,16,16,16,16,16,17,17,17,17,17,17,18,18,18,18,18,18,19,19,19,19,19,19,20,20,20,20,20,20,21,21,21,21,21,21,22,22,22,22,22,22,23,23,23,23,23,23,24,24,24,24,24,24,25,25,25,25,25,25,26,26,26,26,26,26,27,27,27,27,27,27,28,28,28,28,28,28,29,29,29,29,29,29,30,30,30,30,30,30,31,31,31,31,31,31,32,32,32,32,32,32,33,33,33,33,33,33,34,34,34,34,34,34,35,35,35,35,35,35,36,36,36,36,36,36,37,37,37,37,37,37,38,38,38,38,38,38,39,39,39,39,39,39,40,40,40,40,40,40,41,41,41,41,41,41,42,42,42}
#define RG_SCH_PFS_FAIR_FACTOR_6_UL {0,0,0,0,0,1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,8,8,8,8,8,9,9,9,9,9,10,10,10,10,10,11,11,11,11,11,12,12,12,12,12,13,13,13,13,13,14,14,14,14,14,15,15,15,15,15,16,16,16,16,16,17,17,17,17,17,18,18,18,18,18,19,19,19,19,19,20,20,20,20,20,21,21,21,21,21,22,22,22,22,22,23,23,23,23,23,24,24,24,24,24,25,25,25,25,25,26,26,26,26,26,27,27,27,27,27,28,28,28,28,28,29,29,29,29,29,30,30,30,30,30,31,31,31,31,31,32,32,32,32,32,33,33,33,33,33,34,34,34,34,34,35,35,35,35,35,36,36,36,36,36,37,37,37,37,37,38,38,38,38,38,39,39,39,39,39,40,40,40,40,40,41,41,41,41,41,42,42,42,42,42,43,43,43,43,43,44,44,44,44,44,45,45,45,45,45,46,46,46,46,46,47,47,47,47,47,48,48,48,48,48,49,49,49,49,49,50,50,50,50,50}
#define RG_SCH_PFS_FAIR_FACTOR_7_UL {0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10,11,11,11,11,12,12,12,12,13,13,13,13,14,14,14,14,15,15,15,15,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,22,22,22,22,23,23,23,23,24,24,24,24,25,25,25,25,26,26,26,26,27,27,27,27,28,28,28,28,29,29,29,29,30,30,30,30,31,31,31,31,32,32,32,32,33,33,33,33,34,34,34,34,35,35,35,35,36,36,36,36,37,37,37,37,38,38,38,38,39,39,39,39,40,40,40,40,41,41,41,41,42,42,42,42,43,43,43,43,44,44,44,44,45,45,45,45,46,46,46,46,47,47,47,47,48,48,48,48,49,49,49,49,50,50,50,50,51,51,51,51,52,52,52,52,53,53,53,53,54,54,54,54,55,55,55,55,56,56,56,56,57,57,57,57,58,58,58,58,59,59,59,59,60,60,60,60,61,61,61,61,62,62,62,62,63,63,63}
#define RG_SCH_PFS_FAIR_FACTOR_8_UL {0,0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,11,11,11,12,12,12,13,13,13,14,14,14,15,15,15,16,16,16,17,17,17,18,18,18,19,19,19,20,20,20,21,21,21,22,22,22,23,23,23,24,24,24,25,25,25,26,26,26,27,27,27,28,28,28,29,29,29,30,30,30,31,31,31,32,32,32,33,33,33,34,34,34,35,35,35,36,36,36,37,37,37,38,38,38,39,39,39,40,40,40,41,41,41,42,42,42,43,43,43,44,44,44,45,45,45,46,46,46,47,47,47,48,48,48,49,49,49,50,50,50,51,51,51,52,52,52,53,53,53,54,54,54,55,55,55,56,56,56,57,57,57,58,58,58,59,59,59,60,60,60,61,61,61,62,62,62,63,63,63,64,64,64,65,65,65,66,66,66,67,67,67,68,68,68,69,69,69,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70}
#define RG_SCH_PFS_FAIR_FACTOR_9_UL {0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,36,36,37,37,38,38,39,39,40,40,41,41,42,42,43,43,44,44,45,45,46,46,47,47,48,48,49,49,50,50,51,51,52,52,53,53,54,54,55,55,56,56,57,57,58,58,59,59,60,60,61,61,62,62,63,63,64,64,65,65,66,66,67,67,68,68,69,69,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,71}
#define RG_SCH_PFS_FAIR_FACTOR_10_UL {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70}
/* Radisys Implementation */
#define RG_SCH_PFS_FAIR_FACTOR_0 {}
#define RG_SCH_PFS_FAIR_FACTOR_1 {574,573,573,573,573,573,573,573,573,573,573,573,573,573,573,572,572,572,572,572,572,572,572,572,572,572,572,572,572,571,571,571,571,571,571,571,571,571,571,571,571,571,570,570,570,570,570,570,570,570,570,570,570,570,569,569,569,569,569,569,569,569,569,569,569,568,568,568,568,568,568,568,568,568,568,568,567,567,567,567,567,567,567,567,567,567,567,566,566,566,566,566,566,566,566,566,566,565,565,565,565,565,565,565,565,565,564,564,564,564,564,564,564,564,564,563,563,563,563,563,563,563,563,562,562,562,562,562,562,562,562,561,561,561,561,561,561,561,560,560,560,560,560,560,560,560,559,559,559,559,559,559,558,558,558,558,558,558,558,557,557,557,557,557,557,556,556,556,556,556,555,555,555,555,555,554,554,554,554,554,553,553,553,553,553,552,552,552,552,552,551,551,551,551,550,550,550,550,549,549,549,549,548,548,548,547,547,547,546,546,546,545,545,545,544,544,544,543,543,543,542,542,541,541,540,540,540,539,539,538,537,537,536,536,535,534,534,533,532,531,531,530,529,528,527,525,524,523,521,519,517,514,511,507,500}
#define RG_SCH_PFS_FAIR_FACTOR_2 {702,702,702,702,701,701,701,701,700,700,700,700,700,699,699,699,699,698,698,698,697,697,697,697,696,696,696,696,695,695,695,695,694,694,694,694,693,693,693,693,692,692,692,691,691,691,691,690,690,690,689,689,689,689,688,688,688,687,687,687,687,686,686,686,685,685,685,684,684,684,684,683,683,683,682,682,682,681,681,681,680,680,680,679,679,679,678,678,678,677,677,677,676,676,676,675,675,675,674,674,674,673,673,673,672,672,672,671,671,670,670,670,669,669,669,668,668,667,667,667,666,666,665,665,665,664,664,663,663,663,662,662,661,661,660,660,660,659,659,658,658,657,657,656,656,656,655,655,654,654,653,653,652,652,651,651,650,650,649,649,648,648,647,647,646,645,645,644,644,643,643,642,642,641,640,640,639,639,638,637,637,636,635,635,634,633,633,632,631,631,630,629,629,628,627,626,626,625,624,623,622,622,621,620,619,618,617,616,615,615,614,613,612,611,610,609,608,606,605,604,603,602,601,600,598,597,596,594,593,591,590,588,587,585,583,582,580,578,576,574,571,569,567,564,561,558,555,551,547,543,537,531,524,514,500}
#define RG_SCH_PFS_FAIR_FACTOR_3 {927,926,925,925,924,924,923,922,922,921,920,920,919,918,918,917,917,916,915,915,914,913,913,912,911,911,910,909,909,908,907,907,906,905,905,904,903,902,902,901,900,900,899,898,898,897,896,895,895,894,893,893,892,891,890,890,889,888,887,887,886,885,884,884,883,882,881,881,880,879,878,878,877,876,875,874,874,873,872,871,870,870,869,868,867,866,865,865,864,863,862,861,860,860,859,858,857,856,855,854,854,853,852,851,850,849,848,847,846,845,845,844,843,842,841,840,839,838,837,836,835,834,833,832,831,830,829,828,827,826,825,824,823,822,821,820,819,818,817,816,815,814,812,811,810,809,808,807,806,805,803,802,801,800,799,798,796,795,794,793,792,790,789,788,787,785,784,783,781,780,779,777,776,775,773,772,770,769,768,766,765,763,762,760,759,757,756,754,753,751,749,748,746,744,743,741,739,738,736,734,732,730,729,727,725,723,721,719,717,715,713,711,709,706,704,702,700,697,695,693,690,688,685,682,680,677,674,671,668,665,662,659,656,652,649,645,641,638,633,629,625,620,615,610,605,599,593,586,579,571,562,551,539,523,500}
#define RG_SCH_PFS_FAIR_FACTOR_4 {1317,1316,1314,1313,1311,1310,1308,1307,1305,1304,1302,1301,1300,1298,1297,1295,1294,1292,1291,1289,1288,1286,1284,1283,1281,1280,1278,1277,1275,1274,1272,1271,1269,1268,1266,1264,1263,1261,1260,1258,1256,1255,1253,1252,1250,1248,1247,1245,1244,1242,1240,1239,1237,1235,1234,1232,1230,1229,1227,1225,1224,1222,1220,1219,1217,1215,1213,1212,1210,1208,1206,1205,1203,1201,1199,1198,1196,1194,1192,1191,1189,1187,1185,1183,1181,1180,1178,1176,1174,1172,1170,1169,1167,1165,1163,1161,1159,1157,1155,1153,1151,1149,1147,1145,1144,1142,1140,1138,1136,1134,1132,1130,1128,1125,1123,1121,1119,1117,1115,1113,1111,1109,1107,1105,1102,1100,1098,1096,1094,1092,1089,1087,1085,1083,1080,1078,1076,1074,1071,1069,1067,1064,1062,1060,1057,1055,1053,1050,1048,1045,1043,1040,1038,1035,1033,1030,1028,1025,1023,1020,1018,1015,1012,1010,1007,1004,1002,999,996,994,991,988,985,982,979,977,974,971,968,965,962,959,956,953,950,947,943,940,937,934,931,927,924,921,917,914,910,907,903,900,896,893,889,885,881,878,874,870,866,862,858,854,850,845,841,837,832,828,823,819,814,809,804,800,794,789,784,779,773,768,762,756,750,744,737,731,724,717,710,703,695,687,678,670,660,651,640,629,617,604,590,574,555,531,500}
#define RG_SCH_PFS_FAIR_FACTOR_5 {199,199,199,198,198,198,197,197,197,196,196,196,195,195,195,194,194,194,193,193,193,192,192,192,191,191,191,190,190,190,190,189,189,188,188,188,187,187,187,186,186,186,185,185,185,184,184,184,183,183,183,182,182,182,181,181,181,180,180,180,179,179,178,178,178,177,177,177,176,176,176,175,175,174,174,174,173,173,173,172,172,171,171,171,170,170,170,169,169,168,168,168,167,167,166,166,166,165,165,164,164,164,163,163,162,162,162,161,161,160,160,160,159,159,158,158,157,157,157,156,156,155,155,154,154,154,153,153,152,152,151,151,150,150,150,149,149,148,148,147,147,146,146,145,145,144,144,143,143,142,142,141,141,140,140,140,139,138,138,137,137,136,136,135,135,134,134,133,133,132,132,131,131,130,130,129,128,128,127,127,126,126,125,124,124,123,123,122,121,121,120,120,119,118,118,117,116,116,115,114,114,113,112,112,111,110,110,109,108,107,107,106,105,104,104,103,102,101,100,100,99,98,97,96,95,94,93,92,91,90,90,88,87,86,85,84,83,82,81,80,78,77,76,74,73,71,70,68,66,64,62,60,57,54,50}
#define RG_SCH_PFS_FAIR_FACTOR_6 {317,317,316,315,315,314,313,313,312,311,311,310,310,309,308,307,307,306,305,305,304,303,303,302,301,301,300,299,299,298,297,297,296,295,295,294,293,292,292,291,290,290,289,288,288,287,286,285,285,284,283,283,282,281,280,280,279,278,278,277,276,275,275,274,273,272,272,271,270,269,269,268,267,267,266,265,264,264,263,262,261,260,260,259,258,257,257,256,255,254,254,253,252,251,250,250,249,248,247,246,246,245,244,243,242,242,241,240,239,238,238,237,236,235,234,233,233,232,231,230,229,228,228,227,226,225,224,223,222,222,221,220,219,218,217,216,215,215,214,213,212,211,210,209,208,207,206,205,205,204,203,202,201,200,199,198,197,196,195,194,193,192,191,190,189,188,187,186,185,184,183,182,181,180,179,178,177,176,175,174,173,172,171,170,169,167,166,165,164,163,162,161,160,158,157,156,155,154,153,151,150,149,148,147,145,144,143,142,140,139,138,136,135,134,132,131,130,128,127,125,124,122,121,120,118,116,115,113,112,110,108,107,105,103,102,100,98,96,94,92,90,88,86,84,82,79,77,74,72,69,66,62,59,55,50}
#define RG_SCH_PFS_FAIR_FACTOR_7 {523,522,521,519,518,517,515,514,513,511,510,509,507,506,504,503,502,500,499,498,496,495,494,492,491,489,488,487,485,484,483,481,480,478,477,476,474,473,472,470,469,467,466,465,463,462,460,459,458,456,455,453,452,450,449,448,446,445,443,442,440,439,438,436,435,433,432,430,429,427,426,424,423,421,420,419,417,416,414,413,411,410,408,407,405,404,402,401,399,398,396,395,393,392,390,389,387,385,384,382,381,379,378,376,375,373,372,370,368,367,365,364,362,361,359,357,356,354,353,351,349,348,346,345,343,341,340,338,336,335,333,332,330,328,327,325,323,322,320,318,317,315,313,311,310,308,306,305,303,301,299,298,296,294,292,291,289,287,285,284,282,280,278,276,275,273,271,269,267,266,264,262,260,258,256,254,252,251,249,247,245,243,241,239,237,235,233,231,229,227,225,223,221,219,217,215,213,211,209,207,205,203,201,198,196,194,192,190,188,185,183,181,179,176,174,172,169,167,165,162,160,158,155,153,150,148,145,143,140,137,135,132,129,127,124,121,118,115,112,109,106,103,100,96,93,90,86,82,79,75,70,66,61,56,50}
#define RG_SCH_PFS_FAIR_FACTOR_8 {881,879,876,873,871,868,865,863,860,857,855,852,850,847,844,841,839,836,833,831,828,825,823,820,817,815,812,809,807,804,801,798,796,793,790,788,785,782,779,777,774,771,768,766,763,760,757,755,752,749,746,744,741,738,735,733,730,727,724,722,719,716,713,710,708,705,702,699,696,694,691,688,685,682,679,677,674,671,668,665,662,660,657,654,651,648,645,642,640,637,634,631,628,625,622,619,616,614,611,608,605,602,599,596,593,590,587,584,581,578,575,572,569,567,564,561,558,555,552,549,546,543,540,537,534,531,528,525,521,518,515,512,509,506,503,500,497,494,491,488,485,482,478,475,472,469,466,463,460,457,453,450,447,444,441,438,434,431,428,425,422,418,415,412,409,405,402,399,396,392,389,386,382,379,376,373,369,366,362,359,356,352,349,346,342,339,335,332,328,325,322,318,315,311,308,304,301,297,293,290,286,283,279,275,272,268,264,261,257,253,250,246,242,238,235,231,227,223,219,215,211,207,203,200,195,191,187,183,179,175,171,167,162,158,154,149,145,140,136,131,127,122,117,113,108,103,97,92,87,81,76,70,64,57,50}
#define RG_SCH_PFS_FAIR_FACTOR_9 {150,149,149,148,148,147,147,146,146,145,145,144,144,143,143,142,142,141,141,140,140,139,139,138,138,137,137,136,135,135,134,134,133,133,132,132,131,131,130,130,129,129,128,128,127,127,126,125,125,124,124,123,123,122,122,121,121,120,120,119,119,118,118,117,116,116,115,115,114,114,113,113,112,112,111,111,110,110,109,108,108,107,107,106,106,105,105,104,104,103,103,102,101,101,100,100,99,99,98,98,97,97,96,95,95,94,94,93,93,92,92,91,91,90,89,89,88,88,87,87,86,86,85,85,84,83,83,82,82,81,81,80,80,79,78,78,77,77,76,76,75,74,74,73,73,72,72,71,71,70,69,69,68,68,67,67,66,65,65,64,64,63,63,62,61,61,60,60,59,59,58,57,57,56,56,55,55,54,53,53,52,52,51,50,50,49,49,48,48,47,46,46,45,45,44,43,43,42,42,41,40,40,39,39,38,37,37,36,35,35,34,34,33,32,32,31,31,30,29,29,28,27,27,26,25,25,24,24,23,22,22,21,20,20,19,18,18,17,16,16,15,14,14,13,12,11,11,10,9,9,8,7,6,5,5}
#define RG_SCH_PFS_FAIR_FACTOR_10 {259,258,257,256,255,254,253,252,251,250,249,248,247,246,245,244,243,242,241,240,239,238,237,236,235,234,233,232,231,230,229,228,227,226,225,224,223,222,221,220,219,218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198,197,196,195,194,193,192,191,190,189,188,187,186,185,184,183,182,181,180,179,178,177,176,175,174,173,172,171,170,169,168,167,166,165,164,163,162,161,160,159,158,157,156,155,154,153,152,151,150,149,148,147,146,145,144,143,142,141,140,139,138,137,136,135,134,133,132,131,130,129,128,127,126,125,124,123,122,121,120,119,118,117,116,115,114,113,112,111,110,109,108,107,106,105,104,103,102,101,100,99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71,70,69,68,67,66,65,64,63,62,61,60,59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5}


/***** THROUGHTPUT FACTOR *****/
/* VFT Modification */
#define RG_SCH_PFS_TP_FACTOR_0_UL {4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4}
#define RG_SCH_PFS_TP_FACTOR_1_UL {4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6}
#define RG_SCH_PFS_TP_FACTOR_2_UL {4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6}
#define RG_SCH_PFS_TP_FACTOR_3_UL {4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,7,7}
#define RG_SCH_PFS_TP_FACTOR_4_UL {4,4,4,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7}
#define RG_SCH_PFS_TP_FACTOR_5_UL {4,4,4,4,4,4,5,5,5,5,5,5,6,6,6,6,6,6,7,7,7,7,7,7,8,8}
#define RG_SCH_PFS_TP_FACTOR_6_UL {4,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,8,8,8,8,8,9}
#define RG_SCH_PFS_TP_FACTOR_7_UL {4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10}
#define RG_SCH_PFS_TP_FACTOR_8_UL {4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,11,11,11,12,12}
#define RG_SCH_PFS_TP_FACTOR_9_UL {4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17}
#define RG_SCH_PFS_TP_FACTOR_10_UL {4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,27,28,29}
/* Radisys TP Factor */
#define RG_SCH_PFS_TP_FACTOR_0 {500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500}
#define RG_SCH_PFS_TP_FACTOR_1 {400,500,512,520,526,531,535,539,542,545,547,550,552,554,556,558,560,561,563,564,566,567,569,570,571,572,573}
#define RG_SCH_PFS_TP_FACTOR_2 {400,500,526,545,560,572,583,593,602,611,618,625,632,639,645,651,656,662,667,672,676,681,686,690,694,698,702}
#define RG_SCH_PFS_TP_FACTOR_3 {400,500,542,575,602,627,649,669,688,706,723,739,755,769,784,797,811,824,836,848,860,872,883,894,905,916,926}
#define RG_SCH_PFS_TP_FACTOR_4 {400,500,560,611,656,698,738,775,811,845,878,910,941,972,1001,1030,1058,1086,1113,1140,1166,1192,1218,1243,1268,1292,1316}
#define RG_SCH_PFS_TP_FACTOR_5 {40,50,58,65,72,79,85,92,98,104,110,116,122,128,134,139,145,151,156,162,167,173,178,183,188,194,199}
#define RG_SCH_PFS_TP_FACTOR_6 {40,50,60,70,81,91,102,112,123,134,144,155,166,176,187,198,209,219,230,241,252,263,274,284,295,306,317}
#define RG_SCH_PFS_TP_FACTOR_7 {40,50,62,76,92,107,124,141,158,176,194,213,232,251,271,290,310,331,351,372,393,414,435,457,478,500,522}
#define RG_SCH_PFS_TP_FACTOR_8 {40,50,65,84,105,129,154,181,209,238,269,300,333,367,402,437,474,511,549,588,628,668,709,751,793,836,880}
#define RG_SCH_PFS_TP_FACTOR_9 {4,5,6,9,12,15,19,23,28,32,37,43,48,54,60,67,73,80,87,94,101,109,117,125,133,141,150}
// BRANCH: rad_mspd_fdd_t3k
#define RG_SCH_PFS_TP_FACTOR_10 {4,5,7,10,14,19,25,31,38,45,54,62,72,82,92,103,115,127,140,153,166,180,195,210,226,241,258}
// BRANCH: unified_rad_mspd
//#define RG_SCH_PFS_TP_FACTOR_10 {4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,27,28,29}


const uint8_t PFS_TP_FACTOR_LVLS = 27;
const uint8_t PFS_FAIRNESS_FACTOR_LVLS = 255;
const uint8_t MAX_QCI = 20;
const uint8_t UL_NUM_CQI = 16;
const uint8_t MAX_LCG_PER_UE = 4;
const uint8_t MAX_ITBS = 26;

// Increasenumber of Qs for better distribution of UEs
#if (PWCONFIG_PWSCHEDULER_CHANGETO_RRLIKE == PW_ENABLE)
	const uint8_t ULNumGbrQueues 	= 128;
	const uint8_t ULNumMbrQueues 	= 128;
	const uint8_t ULNumAmbrQueues 	= 128;
#else
	const uint8_t ULNumGbrQueues 	= 6;
	const uint8_t ULNumMbrQueues	= 6;
	const uint8_t ULNumAmbrQueues 	= 8;
#endif

const uint8_t UL_DMRS = 2;

struct PfsTbls{
	  std::vector<uint32_t>  tpPrios;
	  std::vector<uint32_t> svcQciPrios;
	  std::vector<uint32_t> fairPrios;
};
struct PfsPrioRange{
	uint8_t min; //Min value in the queue
	uint32_t max;// Max value in queue
	uint8_t NumQueus;//The number of queues
	uint32_t maxDiff;//The difference between max-min
};
struct PfsUlPrioRanges{
	PfsPrioRange  gbrRange;
	PfsPrioRange  mbrRange;
	PfsPrioRange  ambrRange;
};



struct PfsFracPrioInfo{
	uint32_t fracDataRate;
	uint32_t achvdFracDataRate;
	uint32_t fracPrioLvls;

};

struct PfsLcgInfo{
	uint32_t cfgdGbr = 0;
	uint32_t lcgPrio;
	uint8_t priolch;
	PfsFracPrioInfo fracPrioInfo;
	std::vector <struct LogicalChannelConfigListElement_s> LcsInfo;

};

struct PfsUlUe{
	uint8_t cqi;
	uint32_t cqiPrio;
	uint32_t lcgPrio;
	PfsFracPrioInfo fracPrioInfo;
	PfsLcgInfo schedLcgInfo[MAX_LCG_PER_UE];
	uint32_t PfsPrio;
	uint8_t qid;
	std::vector<PfsUlUe> *pointQueue = NULL;
	uint16_t rnti;
	uint32_t effBsr;
	uint32_t SbsReq;
	uint32_t subbandShare;
	uint32_t bytesAlloc;
	uint32_t nPrb;
};

struct PfsUlQueues{
	std::vector<PfsUlUe> GbrQueue[ULNumGbrQueues];
	std::vector<PfsUlUe> MbrQueue[ULNumMbrQueues];
	std::vector<PfsUlUe> AmbrQueue[ULNumAmbrQueues];



};

struct PfsUlCell{
	  uint8_t MaxUesPerTti;
	  PfsUlQueues Queues;
	  uint32_t priosScaleFact;
	  PfsTbls tbls;
	  PfsUlPrioRanges ranges;
	  uint32_t maxSrbDrbPrioval;
	  uint32_t SubBandAvailable;
	  uint16_t RePerRb;


};

struct PfsUlLcgInfo{
		uint32_t BR;
      	uint32_t bs;
      	uint32_t cfgdGbr; //GBR configured for LCG (cumulative UL GBR of all LC mapping to the LCG)
      	uint32_t effGbr;
      	uint32_t deltaMbr;
      	uint32_t effDeltaMbr;
      	uint32_t reportedbs;
      	uint8_t LcgId;
      	std::vector <struct LogicalChannelConfigListElement_s> LcsInfo;

      };
struct PfsUlLcgs{
  	// PW_EDIT - Change from UlLcgInfo to PfsUlLcgInfo
	//UlLcgInfo UlLcgsArray[4];
	PfsUlLcgInfo UlLcgsArray[4];

};

struct PfsSchedInfo{
	uint32_t TotPfsPrio;
	uint32_t totBwReq;
	std::vector<PfsUlUe> UeLst;

};

/// pfsFlowPerf_t structure
struct pw_pfsFlowPerf_t
{
  Time flowStart; ///< flow start time
  unsigned long totalBytesTransmitted; ///< total bytes transmitted
  unsigned int lastTtiBytesTrasmitted; ///< last total bytes transmitted
  double lastAveragedThroughput; ///< last averaged throughput
};


/**
 * \ingroup ff-api
 * \brief Implements the SCHED SAP and CSCHED SAP for a Proportional Fair scheduler
 *
 * This class implements the interface defined by the FfMacScheduler abstract class
 */

class pw_PfFfMacScheduler : public FfMacScheduler
{
public:
  /**
   * \brief Constructor
   *
   * Creates the MAC Scheduler interface implementation
   */
	pw_PfFfMacScheduler ();

  /**
   * Destructor
   */
  virtual ~pw_PfFfMacScheduler ();

  // inherited from Object
  virtual void DoDispose (void);
  /**
   * \brief Get the type ID.
   * \return the object TypeId
   */
  static TypeId GetTypeId (void);

  // inherited from FfMacScheduler
  virtual void SetFfMacCschedSapUser (FfMacCschedSapUser* s);
  virtual void SetFfMacSchedSapUser (FfMacSchedSapUser* s);
  virtual FfMacCschedSapProvider* GetFfMacCschedSapProvider ();
  virtual FfMacSchedSapProvider* GetFfMacSchedSapProvider ();

  // FFR SAPs
  virtual void SetLteFfrSapProvider (LteFfrSapProvider* s);
  virtual LteFfrSapUser* GetLteFfrSapUser ();

  /// allow MemberCschedSapProvider<PfFfMacScheduler> class friend access
  friend class MemberCschedSapProvider<pw_PfFfMacScheduler>;
  /// allow MemberSchedSapProvider<PfFfMacScheduler> class friend access
  friend class MemberSchedSapProvider<pw_PfFfMacScheduler>;

  /**
   * \brief transmission mode configuration update
   *
   * \param rnti the RNTI
   * \param txMode the transmit mode
   */
  void TransmissionModeConfigurationUpdate (uint16_t rnti, uint8_t txMode);

private:
  //
  // Implementation of the CSCHED API primitives
  // (See 4.1 for description of the primitives)
  //

  /**
   * \brief CSched cell config request
   *
   * \param params FfMacCschedSapProvider::CschedCellConfigReqParameters
   */
  void DoCschedCellConfigReq (const struct FfMacCschedSapProvider::CschedCellConfigReqParameters& params);

  /**
   * \brief CSched UE config request
   *
   * \param params FfMacCschedSapProvider::CschedUeConfigReqParameters
   */

  //Fill Tables
  std::vector<uint32_t> FillTbl(uint32_t *src,std::vector<uint32_t> dst,uint32_t start, uint8_t num_entries,uint32_t *min, uint32_t *max);

  PfsPrioRange FillRangeQueues(PfsPrioRange range, uint8_t minprio, uint32_t maxprio, uint8_t NumQs);

  std::map <uint16_t,PfsUlUe>::iterator FindUe (uint16_t rnti);

  void PfsUlMngUeInQ (PfsUlLcgs m_bufferStatus, uint16_t rnti);

  void PfsAddUeToPfsQ(bool *Priochngd, PfsUlLcgInfo LCG, std::map <uint16_t,PfsUlUe>::iterator PfsPrio, uint16_t rnti);

  void PfsRmvUeFromQueue(uint16_t rnti);

  uint8_t UlGetQid(uint32_t PfsPrio, PfsPrioRange range);
  uint8_t UlGetQIdNew (uint32_t PfsPrio, PfsPrioRange range);

  void PfsUlAddUeToQ(std::map <uint16_t,PfsUlUe>::iterator PfsUe, std::vector<PfsUlUe> *UEsQueue);


  void PfsUlUpdPfsPrio(std::map <uint16_t,PfsUlUe>::iterator it_pfs, PfsUlLcgInfo LCG,  bool *Priochngd);

  void PfsUlLcgUpd(PfsUlLcgInfo LCG, uint16_t rnti);

  void CalcEffTbl();

  int getNumFlows(std::set <uint16_t> rntiAllocated);

  void ScheduleUplinkUes(uint8_t RemUes, std::set <uint16_t> rntiAllocated);

  uint8_t PfsUlSchedData(std::vector<PfsUlUe> Queue, uint8_t remUes, std::set <uint16_t> rntiAllocated);

  void PfsUlSchedUeForDat(PfsUlUe UeForScheudle, std::set <uint16_t> rntiAllocated);

  PfsFracPrioInfo PfsinitFracPrioInfo(PfsFracPrioInfo fracPrioInfo, uint32_t cfgdRate);

  PfsFracPrioInfo PfsUpdFracPrioInfo(PfsFracPrioInfo fracPrioInfo, uint32_t bytes);

  void UpdEffBsr(PfsUlLcgs m_bufferStatus, uint16_t rnti);

  uint32_t GetNumSbs(PfsUlUe UeForScheudle);

  void SortAndInsertUeLst(PfsUlUe UeForScheudle, uint32_t subBandReq);

  void SortAndInsertUeLstSbShare(PfsUlUe UeForScheudle, uint32_t subBandReq);
  void UlRbAlloc();

  void MaxThroughput(uint16_t rnti, double minSinr);

    void SpectralEfficiencyCqi(uint16_t rnti, double minSinr);

    void SpectralEfficiencySinr(uint16_t rnti, double minSinr);

    void FinalizeUlOnAlloc(PfsUlUe Ue);

    void updItbsUlcqi(uint16_t rnti, uint8_t rbStart, uint8_t rbEnd);




  //Obtains TP PFS priority from iTbs value
  uint8_t PfsUlGetTpPrio(PfsUlCell PfsCell, uint8_t MAX_ITBS);

  uint32_t DisributeSbs();

  void DoCschedUeConfigReq (const struct FfMacCschedSapProvider::CschedUeConfigReqParameters& params);

  /**
   * \brief CSched LC config request
   *
   * \param params FfMacCschedSapProvider::CschedLcConfigReqParameters
   */
  void DoCschedLcConfigReq (const struct FfMacCschedSapProvider::CschedLcConfigReqParameters& params);

  /**
   * \brief CSched LC release request
   *
   * \param params FfMacCschedSapProvider::CschedLcReleaseReqParameters
   */
  void DoCschedLcReleaseReq (const struct FfMacCschedSapProvider::CschedLcReleaseReqParameters& params);

  /**
   * \brief CSched UE release request
   *
   * \param params FfMacCschedSapProvider::CschedLcReleaseReqParameters
   */
  void DoCschedUeReleaseReq (const struct FfMacCschedSapProvider::CschedUeReleaseReqParameters& params);

  //
  // Implementation of the SCHED API primitives
  // (See 4.2 for description of the primitives)
  //

  /**
   * \brief Sched DL RLC buffer request
   *
   * \param params FfMacSchedSapProvider::SchedDlRlcBufferReqParameters
   */
  void DoSchedDlRlcBufferReq (const struct FfMacSchedSapProvider::SchedDlRlcBufferReqParameters& params);

  /**
   * \brief Sched DL paging buffer request
   *
   * \param params FfMacSchedSapProvider::SchedDlPagingBufferReqParameters
   */
  void DoSchedDlPagingBufferReq (const struct FfMacSchedSapProvider::SchedDlPagingBufferReqParameters& params);

  /**
   * \brief Sched DL MAC buffer request
   *
   * \param params FfMacSchedSapProvider::SchedDlMacBufferReqParameters
   */
  void DoSchedDlMacBufferReq (const struct FfMacSchedSapProvider::SchedDlMacBufferReqParameters& params);

  /**
   * \brief Sched DL trigger request
   *
   * \param params FfMacSchedSapProvider::SchedDlTriggerReqParameters
   */
  void DoSchedDlTriggerReq (const struct FfMacSchedSapProvider::SchedDlTriggerReqParameters& params);

  /**
   * \brief Sched DL RACH info request
   *
   * \param params FfMacSchedSapProvider::SchedDlRachInfoReqParameters
   */
  void DoSchedDlRachInfoReq (const struct FfMacSchedSapProvider::SchedDlRachInfoReqParameters& params);

  /**
   * \brief Sched DL CQI info request
   *
   * \param params FfMacSchedSapProvider::SchedDlCqiInfoReqParameters
   */
  void DoSchedDlCqiInfoReq (const struct FfMacSchedSapProvider::SchedDlCqiInfoReqParameters& params);

  /**
   * \brief Sched UL trigger request
   *
   * \param params FfMacSchedSapProvider::SchedUlTriggerReqParameters
   */
  void DoSchedUlTriggerReq (const struct FfMacSchedSapProvider::SchedUlTriggerReqParameters& params);



  /**
   * \brief Sched UL noise interference request
   *
   * \param params FfMacSchedSapProvider::SchedUlNoiseInterferenceReqParameters
   */
  void DoSchedUlNoiseInterferenceReq (const struct FfMacSchedSapProvider::SchedUlNoiseInterferenceReqParameters& params);

  /**
   * \brief Sched UL SR info request
   *
   * \param params FfMacSchedSapProvider::SchedUlSrInfoReqParameters
   */
  void DoSchedUlSrInfoReq (const struct FfMacSchedSapProvider::SchedUlSrInfoReqParameters& params);

  /**
   * \brief Sched UL MAC control info request
   *
   * \param params FfMacSchedSapProvider::SchedUlMacCtrlInfoReqParameters
   */
  void DoSchedUlMacCtrlInfoReq (const struct FfMacSchedSapProvider::SchedUlMacCtrlInfoReqParameters& params);

  /**
   * \brief Sched UL CQI info request
   *
   * \param params FfMacSchedSapProvider::SchedUlCqiInfoReqParameters
   */
  void DoSchedUlCqiInfoReq (const struct FfMacSchedSapProvider::SchedUlCqiInfoReqParameters& params);

  /**
   * \brief Get RBG size
   *
   * \param dlbandwidth dDL bandwidth
   * \returns the RBG size
   */
  int GetRbgSize (int dlbandwidth);

  /**
   * \brief LC active per flow
   *
   * \param rnti the RNTI
   * \returns the LC active per flow
   */
  unsigned int LcActivePerFlow (uint16_t rnti);

  /**
   * \brief Estimate UL SINR
   *
   * \param rnti the RNTI
   * \param rb the RB
   * \returns the SINR
   */
  double EstimateUlSinr (uint16_t rnti, uint16_t rb);

  /// Refresh DL CQI maps
  void RefreshDlCqiMaps (void);
  /// Refresh UL CQI maps
  void RefreshUlCqiMaps (void);

  /**
   * \brief Update DL RCL buffer info
   *
   * \param rnti the RNTI
   * \param lcid the LCID
   * \param size the size
   */
  void UpdateDlRlcBufferInfo (uint16_t rnti, uint8_t lcid, uint16_t size);
  /**
   * \brief Update UL RCL buffer info
   *
   * \param rnti the RNTI
   * \param size the size
   */
  void UpdateUlRlcBufferInfo (uint16_t rnti, uint16_t size);

  /**
  * \brief Update and return a new process Id for the RNTI specified
  *
  * \param rnti the RNTI of the UE to be updated
  * \return the process id  value
  */
  uint8_t UpdateHarqProcessId (uint16_t rnti);

  /**
  * \brief Return the availability of free process for the RNTI specified
  *
  * \param rnti the RNTI of the UE to be updated
  * \return the process id  value
  */
  uint8_t HarqProcessAvailability (uint16_t rnti);

  /**
  * \brief Refresh HARQ processes according to the timers
  *
  */
  void RefreshHarqProcesses ();

  /*
     * If Pusch CRC OK, increase deltaiTbs by 0.03 itbs
     */
    void HarqCrcOk(uint16_t rnti);

    /*
     * If Pusch CRC FAIL, reduce deltaiTbs by 0.3 itbs
     */
    void HarqCrcFail(uint16_t rnti);

    /*
     * Convert number of RBs to dB
     */
    uint8_t GetPwrRbToPwrdB(uint8_t RBs);

    /*
     * Set remPuschPwr for UE, the absolute power need to be fixed to get TARGET_CQI
     */
    void SetRemPuschDelta(uint8_t cqi, uint16_t rnti);

    void SetRemPuschDeltaSinr(uint8_t sinr, uint16_t rnti);

    /*
     * Set TPC according to 3GPP, reducing a part from the absolue pusch fix.
     */
    void SetTpc(uint16_t rnti, int8_t availPwr);

    /*
     * Return number of RBs from dB
     */
    uint8_t GetPwrGetMaxRb(int8_t availPwr,uint16_t offset);

    /*
     * Invokes on PHR report, and update Power per RB according
     */
    void PwrUpdPhr(int8_t phr, uint16_t rnti);

    /*
     * Initialize UE parameters on connection
     */
    void cfgUe(uint16_t rnti);

    void SetTargetCqi(uint16_t rnti);

    bool Is64Qam(uint8_t precent);

    // PW_EDIT
    void DoSetPwParams (uint16_t);
    void ReportUlSchedulerStat (uint16_t, uint32_t, uint32_t, uint32_t, uint16_t);


    /*
     *
     */
    int8_t GetUeAvailPwr(uint16_t rnti);

    uint8_t UlGetItbs(uint16_t rnti);

    uint8_t GetMaxRbs(uint16_t rnti);

  Ptr<LteAmc> m_amc; ///< AMC


  std::map <uint16_t,PfsUlUe> PfsUlUes; ///< Pfs structs for UEs

  //Size of Suband. Depents on the Number of PRB.
  uint32_t SbsSize;

  uint32_t TbSzEff[MAX_ITBS];





  /**
   * Vectors of UE's LC info
  */
  std::map <LteFlowId_t, FfMacSchedSapProvider::SchedDlRlcBufferReqParameters> m_rlcBufferReq;


  /**
  * Map of UE statistics (per RNTI basis) in downlink
  */
  std::map <uint16_t, pw_pfsFlowPerf_t> m_flowStatsDl;

  /**
  * Map of UE statistics (per RNTI basis)
  */
  std::map <uint16_t, pw_pfsFlowPerf_t> m_flowStatsUl;


  /**
  * Map of UE's DL CQI P01 received
  */
  std::map <uint16_t,uint8_t> m_p10CqiRxed;
  /**
  * Map of UE's timers on DL CQI P01 received
  */
  std::map <uint16_t,uint32_t> m_p10CqiTimers;

  /**
  * Map of UE's DL CQI A30 received
  */
  std::map <uint16_t,SbMeasResult_s> m_a30CqiRxed;
  /**
  * Map of UE's timers on DL CQI A30 received
  */
  std::map <uint16_t,uint32_t> m_a30CqiTimers;

  /**
  * Map of previous allocated UE per RBG
  * (used to retrieve info from UL-CQI)
  */
  std::map <uint16_t, std::vector <uint16_t> > m_allocationMaps;

  /**
  * Map of UEs' UL-CQI per RBG
  */
  std::map <uint16_t, std::vector <double> > m_ueCqi;
  /**
  * Map of UEs' timers on UL-CQI per RBG
  */
  std::map <uint16_t, uint32_t> m_ueCqiTimers;

  /**
  * Map of UE's buffer status reports received
  */
  std::map <uint16_t,uint32_t> m_ceBsrRxed;

  std::map <uint16_t,ueInfo> ueUl;


  std::map <uint16_t, PfsUlLcgs> m_ceBsr_LCG_Rxed;


  // MAC SAPs
  FfMacCschedSapUser* m_cschedSapUser; ///< CSched SAP user
  FfMacSchedSapUser* m_schedSapUser; ///< Sched SAP user
  FfMacCschedSapProvider* m_cschedSapProvider; ///< CSched SAP provider
  FfMacSchedSapProvider* m_schedSapProvider; ///< Sched SAP provider

  // FFR SAPs
  LteFfrSapUser* m_ffrSapUser; ///< FFR SAP user
  LteFfrSapProvider* m_ffrSapProvider; ///< FFR SAP provider

  // Internal parameters
  FfMacCschedSapProvider::CschedCellConfigReqParameters m_cschedCellConfig; ///< CSched cell config

  PfsUlCell globalPfs;

  PfsSchedInfo toBeSchedInfo;

  PfsSchedInfo UlAllocInfo;

  // PW_EDIT
  uint16_t m_pwEnbId;
  uint32_t m_pwMaxTPprio;
  bool	m_schedulerStatsFirstWrite;


  double m_timeWindow; ///< time window

  uint16_t m_nextRntiUl; ///< RNTI of the next user to be served next scheduling in UL

  uint32_t m_cqiTimersThreshold; ///< # of TTIs for which a CQI can be considered valid

  std::map <uint16_t,uint8_t> m_uesTxMode; ///< txMode of the UEs

  // HARQ attributes
  /**
  * m_harqOn when false inhibit the HARQ mechanisms (by default active)
  */
  bool m_harqOn;
  std::map <uint16_t, uint8_t> m_dlHarqCurrentProcessId; ///< DL HARQ current process ID
  //HARQ status
  // 0: process Id available
  // x>0: process Id equal to `x` transmission count
  std::map <uint16_t, DlHarqProcessesStatus_t> m_dlHarqProcessesStatus; ///< DL HARQ process status
  std::map <uint16_t, DlHarqProcessesTimer_t> m_dlHarqProcessesTimer; ///< DL HARQ process timer
  std::map <uint16_t, DlHarqProcessesDciBuffer_t> m_dlHarqProcessesDciBuffer; ///< DL HARQ process DCI buffer
  std::map <uint16_t, DlHarqRlcPduListBuffer_t> m_dlHarqProcessesRlcPduListBuffer; ///< DL HARQ process RLC PDU list buffer
  std::vector <DlInfoListElement_s> m_dlInfoListBuffered; ///< HARQ retx buffered

  std::map <uint16_t, uint8_t> m_ulHarqCurrentProcessId; ///< UL HARQ current process ID
  //HARQ status
  // 0: process Id available
  // x>0: process Id equal to `x` transmission count
  std::map <uint16_t, UlHarqProcessesStatus_t> m_ulHarqProcessesStatus; ///< UL HARQ process status
  std::map <uint16_t, UlHarqProcessesDciBuffer_t> m_ulHarqProcessesDciBuffer; ///< UL HARQ process DCI buffer


  // RACH attributes
  std::vector <struct RachListElement_s> m_rachList; ///< RACH list
  std::vector <uint16_t> m_rachAllocationMap; ///< RACH allocation map
  uint8_t m_ulGrantMcs; ///< MCS for UL grant (default 0)
  uint8_t eff_state;

  bool m_volteOn; //default false force BLER =1%, max mcs==10
  bool m_ttiBundlingOn;//calls HARQ CRC HarqCrcFail only
  uint16_t m_ttiBundlingOffsetDB;//offset adding for max available RBs calculation in Ge
};

} // namespace ns3

#endif /* PW_PF_FF_MAC_SCHEDULER_H */
