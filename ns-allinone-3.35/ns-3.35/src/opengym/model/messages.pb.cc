// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#include "messages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace ns3opengym {
constexpr SpaceDescription::SpaceDescription(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , space_(nullptr)
  , type_(0)
{}
struct SpaceDescriptionDefaultTypeInternal {
  constexpr SpaceDescriptionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpaceDescriptionDefaultTypeInternal() {}
  union {
    SpaceDescription _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpaceDescriptionDefaultTypeInternal _SpaceDescription_default_instance_;
constexpr DiscreteSpace::DiscreteSpace(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : n_(0){}
struct DiscreteSpaceDefaultTypeInternal {
  constexpr DiscreteSpaceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DiscreteSpaceDefaultTypeInternal() {}
  union {
    DiscreteSpace _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DiscreteSpaceDefaultTypeInternal _DiscreteSpace_default_instance_;
constexpr BoxSpace::BoxSpace(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : shape_()
  , _shape_cached_byte_size_(0)
  , low_(0)
  , high_(0)
  , dtype_(0)
{}
struct BoxSpaceDefaultTypeInternal {
  constexpr BoxSpaceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BoxSpaceDefaultTypeInternal() {}
  union {
    BoxSpace _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BoxSpaceDefaultTypeInternal _BoxSpace_default_instance_;
constexpr TupleSpace::TupleSpace(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : element_(){}
struct TupleSpaceDefaultTypeInternal {
  constexpr TupleSpaceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TupleSpaceDefaultTypeInternal() {}
  union {
    TupleSpace _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TupleSpaceDefaultTypeInternal _TupleSpace_default_instance_;
constexpr DictSpace::DictSpace(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : element_(){}
struct DictSpaceDefaultTypeInternal {
  constexpr DictSpaceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DictSpaceDefaultTypeInternal() {}
  union {
    DictSpace _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DictSpaceDefaultTypeInternal _DictSpace_default_instance_;
constexpr DataContainer::DataContainer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_(nullptr)
  , type_(0)
{}
struct DataContainerDefaultTypeInternal {
  constexpr DataContainerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataContainerDefaultTypeInternal() {}
  union {
    DataContainer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataContainerDefaultTypeInternal _DataContainer_default_instance_;
constexpr DiscreteDataContainer::DiscreteDataContainer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(0){}
struct DiscreteDataContainerDefaultTypeInternal {
  constexpr DiscreteDataContainerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DiscreteDataContainerDefaultTypeInternal() {}
  union {
    DiscreteDataContainer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DiscreteDataContainerDefaultTypeInternal _DiscreteDataContainer_default_instance_;
constexpr BoxDataContainer::BoxDataContainer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : shape_()
  , _shape_cached_byte_size_(0)
  , intdata_()
  , _intdata_cached_byte_size_(0)
  , uintdata_()
  , _uintdata_cached_byte_size_(0)
  , floatdata_()
  , doubledata_()
  , dtype_(0)
{}
struct BoxDataContainerDefaultTypeInternal {
  constexpr BoxDataContainerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BoxDataContainerDefaultTypeInternal() {}
  union {
    BoxDataContainer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BoxDataContainerDefaultTypeInternal _BoxDataContainer_default_instance_;
constexpr TupleDataContainer::TupleDataContainer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : element_(){}
struct TupleDataContainerDefaultTypeInternal {
  constexpr TupleDataContainerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TupleDataContainerDefaultTypeInternal() {}
  union {
    TupleDataContainer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TupleDataContainerDefaultTypeInternal _TupleDataContainer_default_instance_;
constexpr DictDataContainer::DictDataContainer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : element_(){}
struct DictDataContainerDefaultTypeInternal {
  constexpr DictDataContainerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DictDataContainerDefaultTypeInternal() {}
  union {
    DictDataContainer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DictDataContainerDefaultTypeInternal _DictDataContainer_default_instance_;
constexpr SimInitMsg::SimInitMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : obsspace_(nullptr)
  , actspace_(nullptr)
  , simprocessid_(uint64_t{0u})
  , wafshellprocessid_(uint64_t{0u}){}
struct SimInitMsgDefaultTypeInternal {
  constexpr SimInitMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SimInitMsgDefaultTypeInternal() {}
  union {
    SimInitMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SimInitMsgDefaultTypeInternal _SimInitMsg_default_instance_;
constexpr SimInitAck::SimInitAck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : done_(false)
  , stopsimreq_(false){}
struct SimInitAckDefaultTypeInternal {
  constexpr SimInitAckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SimInitAckDefaultTypeInternal() {}
  union {
    SimInitAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SimInitAckDefaultTypeInternal _SimInitAck_default_instance_;
constexpr EnvStateMsg::EnvStateMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : info_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , obsdata_(nullptr)
  , reward_(0)
  , isgameover_(false)
  , reason_(0)
{}
struct EnvStateMsgDefaultTypeInternal {
  constexpr EnvStateMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EnvStateMsgDefaultTypeInternal() {}
  union {
    EnvStateMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EnvStateMsgDefaultTypeInternal _EnvStateMsg_default_instance_;
constexpr EnvActMsg::EnvActMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : actdata_(nullptr)
  , stopsimreq_(false){}
struct EnvActMsgDefaultTypeInternal {
  constexpr EnvActMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EnvActMsgDefaultTypeInternal() {}
  union {
    EnvActMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EnvActMsgDefaultTypeInternal _EnvActMsg_default_instance_;
}  // namespace ns3opengym
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_messages_2eproto[14];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_messages_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_messages_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_messages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ns3opengym::SpaceDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ns3opengym::SpaceDescription, type_),
  PROTOBUF_FIELD_OFFSET(::ns3opengym::SpaceDescription, space_),
  PROTOBUF_FIELD_OFFSET(::ns3opengym::SpaceDescription, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ns3opengym::DiscreteSpace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ns3opengym::DiscreteSpace, n_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ns3opengym::BoxSpace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ns3opengym::BoxSpace, low_),
  PROTOBUF_FIELD_OFFSET(::ns3opengym::BoxSpace, high_),
  PROTOBUF_FIELD_OFFSET(::ns3opengym::BoxSpace, dtype_),
  PROTOBUF_FIELD_OFFSET(::ns3opengym::BoxSpace, shape_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ns3opengym::TupleSpace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ns3opengym::TupleSpace, element_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ns3opengym::DictSpace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ns3opengym::DictSpace, element_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ns3opengym::DataContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ns3opengym::DataContainer, type_),
  PROTOBUF_FIELD_OFFSET(::ns3opengym::DataContainer, data_),
  PROTOBUF_FIELD_OFFSET(::ns3opengym::DataContainer, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ns3opengym::DiscreteDataContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ns3opengym::DiscreteDataContainer, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ns3opengym::BoxDataContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ns3opengym::BoxDataContainer, dtype_),
  PROTOBUF_FIELD_OFFSET(::ns3opengym::BoxDataContainer, shape_),
  PROTOBUF_FIELD_OFFSET(::ns3opengym::BoxDataContainer, intdata_),
  PROTOBUF_FIELD_OFFSET(::ns3opengym::BoxDataContainer, uintdata_),
  PROTOBUF_FIELD_OFFSET(::ns3opengym::BoxDataContainer, floatdata_),
  PROTOBUF_FIELD_OFFSET(::ns3opengym::BoxDataContainer, doubledata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ns3opengym::TupleDataContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ns3opengym::TupleDataContainer, element_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ns3opengym::DictDataContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ns3opengym::DictDataContainer, element_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ns3opengym::SimInitMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ns3opengym::SimInitMsg, simprocessid_),
  PROTOBUF_FIELD_OFFSET(::ns3opengym::SimInitMsg, wafshellprocessid_),
  PROTOBUF_FIELD_OFFSET(::ns3opengym::SimInitMsg, obsspace_),
  PROTOBUF_FIELD_OFFSET(::ns3opengym::SimInitMsg, actspace_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ns3opengym::SimInitAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ns3opengym::SimInitAck, done_),
  PROTOBUF_FIELD_OFFSET(::ns3opengym::SimInitAck, stopsimreq_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ns3opengym::EnvStateMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ns3opengym::EnvStateMsg, obsdata_),
  PROTOBUF_FIELD_OFFSET(::ns3opengym::EnvStateMsg, reward_),
  PROTOBUF_FIELD_OFFSET(::ns3opengym::EnvStateMsg, isgameover_),
  PROTOBUF_FIELD_OFFSET(::ns3opengym::EnvStateMsg, reason_),
  PROTOBUF_FIELD_OFFSET(::ns3opengym::EnvStateMsg, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ns3opengym::EnvActMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ns3opengym::EnvActMsg, actdata_),
  PROTOBUF_FIELD_OFFSET(::ns3opengym::EnvActMsg, stopsimreq_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ns3opengym::SpaceDescription)},
  { 9, -1, -1, sizeof(::ns3opengym::DiscreteSpace)},
  { 16, -1, -1, sizeof(::ns3opengym::BoxSpace)},
  { 26, -1, -1, sizeof(::ns3opengym::TupleSpace)},
  { 33, -1, -1, sizeof(::ns3opengym::DictSpace)},
  { 40, -1, -1, sizeof(::ns3opengym::DataContainer)},
  { 49, -1, -1, sizeof(::ns3opengym::DiscreteDataContainer)},
  { 56, -1, -1, sizeof(::ns3opengym::BoxDataContainer)},
  { 68, -1, -1, sizeof(::ns3opengym::TupleDataContainer)},
  { 75, -1, -1, sizeof(::ns3opengym::DictDataContainer)},
  { 82, -1, -1, sizeof(::ns3opengym::SimInitMsg)},
  { 92, -1, -1, sizeof(::ns3opengym::SimInitAck)},
  { 100, -1, -1, sizeof(::ns3opengym::EnvStateMsg)},
  { 111, -1, -1, sizeof(::ns3opengym::EnvActMsg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ns3opengym::_SpaceDescription_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ns3opengym::_DiscreteSpace_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ns3opengym::_BoxSpace_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ns3opengym::_TupleSpace_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ns3opengym::_DictSpace_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ns3opengym::_DataContainer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ns3opengym::_DiscreteDataContainer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ns3opengym::_BoxDataContainer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ns3opengym::_TupleDataContainer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ns3opengym::_DictDataContainer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ns3opengym::_SimInitMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ns3opengym::_SimInitAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ns3opengym::_EnvStateMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ns3opengym::_EnvActMsg_default_instance_),
};

const char descriptor_table_protodef_messages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016messages.proto\022\nns3opengym\032\031google/pro"
  "tobuf/any.proto\"j\n\020SpaceDescription\022#\n\004t"
  "ype\030\001 \001(\0162\025.ns3opengym.SpaceType\022#\n\005spac"
  "e\030\002 \001(\0132\024.google.protobuf.Any\022\014\n\004name\030\003 "
  "\001(\t\"\032\n\rDiscreteSpace\022\t\n\001n\030\001 \001(\005\"V\n\010BoxSp"
  "ace\022\013\n\003low\030\001 \001(\002\022\014\n\004high\030\002 \001(\002\022 \n\005dtype\030"
  "\003 \001(\0162\021.ns3opengym.Dtype\022\r\n\005shape\030\004 \003(\r\""
  ";\n\nTupleSpace\022-\n\007element\030\001 \003(\0132\034.ns3open"
  "gym.SpaceDescription\":\n\tDictSpace\022-\n\007ele"
  "ment\030\001 \003(\0132\034.ns3opengym.SpaceDescription"
  "\"f\n\rDataContainer\022#\n\004type\030\001 \001(\0162\025.ns3ope"
  "ngym.SpaceType\022\"\n\004data\030\002 \001(\0132\024.google.pr"
  "otobuf.Any\022\014\n\004name\030\003 \001(\t\"%\n\025DiscreteData"
  "Container\022\014\n\004data\030\001 \001(\005\"\215\001\n\020BoxDataConta"
  "iner\022 \n\005dtype\030\001 \001(\0162\021.ns3opengym.Dtype\022\r"
  "\n\005shape\030\002 \003(\r\022\017\n\007intData\030\003 \003(\005\022\020\n\010uintDa"
  "ta\030\004 \003(\r\022\021\n\tfloatData\030\005 \003(\002\022\022\n\ndoubleDat"
  "a\030\006 \003(\001\"@\n\022TupleDataContainer\022*\n\007element"
  "\030\001 \003(\0132\031.ns3opengym.DataContainer\"\?\n\021Dic"
  "tDataContainer\022*\n\007element\030\001 \003(\0132\031.ns3ope"
  "ngym.DataContainer\"\235\001\n\nSimInitMsg\022\024\n\014sim"
  "ProcessId\030\001 \001(\004\022\031\n\021wafShellProcessId\030\002 \001"
  "(\004\022.\n\010obsSpace\030\003 \001(\0132\034.ns3opengym.SpaceD"
  "escription\022.\n\010actSpace\030\004 \001(\0132\034.ns3opengy"
  "m.SpaceDescription\".\n\nSimInitAck\022\014\n\004done"
  "\030\001 \001(\010\022\022\n\nstopSimReq\030\002 \001(\010\"\306\001\n\013EnvStateM"
  "sg\022*\n\007obsData\030\001 \001(\0132\031.ns3opengym.DataCon"
  "tainer\022\016\n\006reward\030\002 \001(\002\022\022\n\nisGameOver\030\003 \001"
  "(\010\022.\n\006reason\030\004 \001(\0162\036.ns3opengym.EnvState"
  "Msg.Reason\022\014\n\004info\030\005 \001(\t\")\n\006Reason\022\021\n\rSi"
  "mulationEnd\020\000\022\014\n\010GameOver\020\001\"K\n\tEnvActMsg"
  "\022*\n\007actData\030\001 \001(\0132\031.ns3opengym.DataConta"
  "iner\022\022\n\nstopSimReq\030\002 \001(\010*\234\001\n\007MsgType\022\013\n\007"
  "Unknown\020\000\022\010\n\004Init\020\001\022\017\n\013ActionSpace\020\002\022\024\n\020"
  "ObservationSpace\020\003\022\016\n\nIsGameOver\020\004\022\017\n\013Ob"
  "servation\020\005\022\n\n\006Reward\020\006\022\r\n\tExtraInfo\020\007\022\n"
  "\n\006Action\020\010\022\013\n\007StopEnv\020\t*H\n\tSpaceType\022\017\n\013"
  "NoSpaceType\020\000\022\014\n\010Discrete\020\001\022\007\n\003Box\020\002\022\t\n\005"
  "Tuple\020\003\022\010\n\004Dict\020\004*>\n\005Dtype\022\013\n\007NoDType\020\000\022"
  "\007\n\003INT\020\001\022\010\n\004UINT\020\002\022\t\n\005FLOAT\020\003\022\n\n\006DOUBLE\020"
  "\004b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_messages_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_messages_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2eproto = {
  false, false, 1609, descriptor_table_protodef_messages_2eproto, "messages.proto", 
  &descriptor_table_messages_2eproto_once, descriptor_table_messages_2eproto_deps, 1, 14,
  schemas, file_default_instances, TableStruct_messages_2eproto::offsets,
  file_level_metadata_messages_2eproto, file_level_enum_descriptors_messages_2eproto, file_level_service_descriptors_messages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_messages_2eproto_getter() {
  return &descriptor_table_messages_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_messages_2eproto(&descriptor_table_messages_2eproto);
namespace ns3opengym {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EnvStateMsg_Reason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2eproto);
  return file_level_enum_descriptors_messages_2eproto[0];
}
bool EnvStateMsg_Reason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr EnvStateMsg_Reason EnvStateMsg::SimulationEnd;
constexpr EnvStateMsg_Reason EnvStateMsg::GameOver;
constexpr EnvStateMsg_Reason EnvStateMsg::Reason_MIN;
constexpr EnvStateMsg_Reason EnvStateMsg::Reason_MAX;
constexpr int EnvStateMsg::Reason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2eproto);
  return file_level_enum_descriptors_messages_2eproto[1];
}
bool MsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpaceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2eproto);
  return file_level_enum_descriptors_messages_2eproto[2];
}
bool SpaceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Dtype_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2eproto);
  return file_level_enum_descriptors_messages_2eproto[3];
}
bool Dtype_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SpaceDescription::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Any& space(const SpaceDescription* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Any&
SpaceDescription::_Internal::space(const SpaceDescription* msg) {
  return *msg->space_;
}
void SpaceDescription::clear_space() {
  if (GetArenaForAllocation() == nullptr && space_ != nullptr) {
    delete space_;
  }
  space_ = nullptr;
}
SpaceDescription::SpaceDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ns3opengym.SpaceDescription)
}
SpaceDescription::SpaceDescription(const SpaceDescription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_space()) {
    space_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from.space_);
  } else {
    space_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:ns3opengym.SpaceDescription)
}

void SpaceDescription::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&space_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&space_)) + sizeof(type_));
}

SpaceDescription::~SpaceDescription() {
  // @@protoc_insertion_point(destructor:ns3opengym.SpaceDescription)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SpaceDescription::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete space_;
}

void SpaceDescription::ArenaDtor(void* object) {
  SpaceDescription* _this = reinterpret_cast< SpaceDescription* >(object);
  (void)_this;
}
void SpaceDescription::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpaceDescription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpaceDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3opengym.SpaceDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && space_ != nullptr) {
    delete space_;
  }
  space_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpaceDescription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ns3opengym.SpaceType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::ns3opengym::SpaceType>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any space = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_space(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ns3opengym.SpaceDescription.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpaceDescription::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3opengym.SpaceDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ns3opengym.SpaceType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .google.protobuf.Any space = 2;
  if (this->_internal_has_space()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::space(this), target, stream);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ns3opengym.SpaceDescription.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3opengym.SpaceDescription)
  return target;
}

size_t SpaceDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3opengym.SpaceDescription)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.Any space = 2;
  if (this->_internal_has_space()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *space_);
  }

  // .ns3opengym.SpaceType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpaceDescription::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SpaceDescription::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpaceDescription::GetClassData() const { return &_class_data_; }

void SpaceDescription::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SpaceDescription *>(to)->MergeFrom(
      static_cast<const SpaceDescription &>(from));
}


void SpaceDescription::MergeFrom(const SpaceDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3opengym.SpaceDescription)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_space()) {
    _internal_mutable_space()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_space());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpaceDescription::CopyFrom(const SpaceDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3opengym.SpaceDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpaceDescription::IsInitialized() const {
  return true;
}

void SpaceDescription::InternalSwap(SpaceDescription* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpaceDescription, type_)
      + sizeof(SpaceDescription::type_)
      - PROTOBUF_FIELD_OFFSET(SpaceDescription, space_)>(
          reinterpret_cast<char*>(&space_),
          reinterpret_cast<char*>(&other->space_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpaceDescription::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[0]);
}

// ===================================================================

class DiscreteSpace::_Internal {
 public:
};

DiscreteSpace::DiscreteSpace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ns3opengym.DiscreteSpace)
}
DiscreteSpace::DiscreteSpace(const DiscreteSpace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  n_ = from.n_;
  // @@protoc_insertion_point(copy_constructor:ns3opengym.DiscreteSpace)
}

void DiscreteSpace::SharedCtor() {
n_ = 0;
}

DiscreteSpace::~DiscreteSpace() {
  // @@protoc_insertion_point(destructor:ns3opengym.DiscreteSpace)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DiscreteSpace::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DiscreteSpace::ArenaDtor(void* object) {
  DiscreteSpace* _this = reinterpret_cast< DiscreteSpace* >(object);
  (void)_this;
}
void DiscreteSpace::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DiscreteSpace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DiscreteSpace::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3opengym.DiscreteSpace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  n_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DiscreteSpace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 n = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          n_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DiscreteSpace::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3opengym.DiscreteSpace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 n = 1;
  if (this->_internal_n() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_n(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3opengym.DiscreteSpace)
  return target;
}

size_t DiscreteSpace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3opengym.DiscreteSpace)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 n = 1;
  if (this->_internal_n() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_n());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DiscreteSpace::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DiscreteSpace::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DiscreteSpace::GetClassData() const { return &_class_data_; }

void DiscreteSpace::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DiscreteSpace *>(to)->MergeFrom(
      static_cast<const DiscreteSpace &>(from));
}


void DiscreteSpace::MergeFrom(const DiscreteSpace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3opengym.DiscreteSpace)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_n() != 0) {
    _internal_set_n(from._internal_n());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DiscreteSpace::CopyFrom(const DiscreteSpace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3opengym.DiscreteSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscreteSpace::IsInitialized() const {
  return true;
}

void DiscreteSpace::InternalSwap(DiscreteSpace* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(n_, other->n_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DiscreteSpace::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[1]);
}

// ===================================================================

class BoxSpace::_Internal {
 public:
};

BoxSpace::BoxSpace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  shape_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ns3opengym.BoxSpace)
}
BoxSpace::BoxSpace(const BoxSpace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      shape_(from.shape_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&low_, &from.low_,
    static_cast<size_t>(reinterpret_cast<char*>(&dtype_) -
    reinterpret_cast<char*>(&low_)) + sizeof(dtype_));
  // @@protoc_insertion_point(copy_constructor:ns3opengym.BoxSpace)
}

void BoxSpace::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&low_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dtype_) -
    reinterpret_cast<char*>(&low_)) + sizeof(dtype_));
}

BoxSpace::~BoxSpace() {
  // @@protoc_insertion_point(destructor:ns3opengym.BoxSpace)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BoxSpace::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BoxSpace::ArenaDtor(void* object) {
  BoxSpace* _this = reinterpret_cast< BoxSpace* >(object);
  (void)_this;
}
void BoxSpace::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoxSpace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BoxSpace::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3opengym.BoxSpace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shape_.Clear();
  ::memset(&low_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dtype_) -
      reinterpret_cast<char*>(&low_)) + sizeof(dtype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoxSpace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float low = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          low_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float high = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          high_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .ns3opengym.Dtype dtype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dtype(static_cast<::ns3opengym::Dtype>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 shape = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_shape(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BoxSpace::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3opengym.BoxSpace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float low = 1;
  if (!(this->_internal_low() <= 0 && this->_internal_low() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_low(), target);
  }

  // float high = 2;
  if (!(this->_internal_high() <= 0 && this->_internal_high() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_high(), target);
  }

  // .ns3opengym.Dtype dtype = 3;
  if (this->_internal_dtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_dtype(), target);
  }

  // repeated uint32 shape = 4;
  {
    int byte_size = _shape_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_shape(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3opengym.BoxSpace)
  return target;
}

size_t BoxSpace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3opengym.BoxSpace)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 shape = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->shape_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _shape_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // float low = 1;
  if (!(this->_internal_low() <= 0 && this->_internal_low() >= 0)) {
    total_size += 1 + 4;
  }

  // float high = 2;
  if (!(this->_internal_high() <= 0 && this->_internal_high() >= 0)) {
    total_size += 1 + 4;
  }

  // .ns3opengym.Dtype dtype = 3;
  if (this->_internal_dtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BoxSpace::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BoxSpace::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BoxSpace::GetClassData() const { return &_class_data_; }

void BoxSpace::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BoxSpace *>(to)->MergeFrom(
      static_cast<const BoxSpace &>(from));
}


void BoxSpace::MergeFrom(const BoxSpace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3opengym.BoxSpace)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shape_.MergeFrom(from.shape_);
  if (!(from._internal_low() <= 0 && from._internal_low() >= 0)) {
    _internal_set_low(from._internal_low());
  }
  if (!(from._internal_high() <= 0 && from._internal_high() >= 0)) {
    _internal_set_high(from._internal_high());
  }
  if (from._internal_dtype() != 0) {
    _internal_set_dtype(from._internal_dtype());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BoxSpace::CopyFrom(const BoxSpace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3opengym.BoxSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoxSpace::IsInitialized() const {
  return true;
}

void BoxSpace::InternalSwap(BoxSpace* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  shape_.InternalSwap(&other->shape_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BoxSpace, dtype_)
      + sizeof(BoxSpace::dtype_)
      - PROTOBUF_FIELD_OFFSET(BoxSpace, low_)>(
          reinterpret_cast<char*>(&low_),
          reinterpret_cast<char*>(&other->low_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BoxSpace::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[2]);
}

// ===================================================================

class TupleSpace::_Internal {
 public:
};

TupleSpace::TupleSpace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  element_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ns3opengym.TupleSpace)
}
TupleSpace::TupleSpace(const TupleSpace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      element_(from.element_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ns3opengym.TupleSpace)
}

void TupleSpace::SharedCtor() {
}

TupleSpace::~TupleSpace() {
  // @@protoc_insertion_point(destructor:ns3opengym.TupleSpace)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TupleSpace::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TupleSpace::ArenaDtor(void* object) {
  TupleSpace* _this = reinterpret_cast< TupleSpace* >(object);
  (void)_this;
}
void TupleSpace::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TupleSpace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TupleSpace::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3opengym.TupleSpace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  element_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TupleSpace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ns3opengym.SpaceDescription element = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_element(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TupleSpace::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3opengym.TupleSpace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ns3opengym.SpaceDescription element = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_element_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_element(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3opengym.TupleSpace)
  return target;
}

size_t TupleSpace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3opengym.TupleSpace)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ns3opengym.SpaceDescription element = 1;
  total_size += 1UL * this->_internal_element_size();
  for (const auto& msg : this->element_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TupleSpace::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TupleSpace::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TupleSpace::GetClassData() const { return &_class_data_; }

void TupleSpace::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TupleSpace *>(to)->MergeFrom(
      static_cast<const TupleSpace &>(from));
}


void TupleSpace::MergeFrom(const TupleSpace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3opengym.TupleSpace)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  element_.MergeFrom(from.element_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TupleSpace::CopyFrom(const TupleSpace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3opengym.TupleSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TupleSpace::IsInitialized() const {
  return true;
}

void TupleSpace::InternalSwap(TupleSpace* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  element_.InternalSwap(&other->element_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TupleSpace::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[3]);
}

// ===================================================================

class DictSpace::_Internal {
 public:
};

DictSpace::DictSpace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  element_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ns3opengym.DictSpace)
}
DictSpace::DictSpace(const DictSpace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      element_(from.element_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ns3opengym.DictSpace)
}

void DictSpace::SharedCtor() {
}

DictSpace::~DictSpace() {
  // @@protoc_insertion_point(destructor:ns3opengym.DictSpace)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DictSpace::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DictSpace::ArenaDtor(void* object) {
  DictSpace* _this = reinterpret_cast< DictSpace* >(object);
  (void)_this;
}
void DictSpace::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DictSpace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DictSpace::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3opengym.DictSpace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  element_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DictSpace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ns3opengym.SpaceDescription element = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_element(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DictSpace::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3opengym.DictSpace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ns3opengym.SpaceDescription element = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_element_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_element(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3opengym.DictSpace)
  return target;
}

size_t DictSpace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3opengym.DictSpace)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ns3opengym.SpaceDescription element = 1;
  total_size += 1UL * this->_internal_element_size();
  for (const auto& msg : this->element_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DictSpace::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DictSpace::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DictSpace::GetClassData() const { return &_class_data_; }

void DictSpace::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DictSpace *>(to)->MergeFrom(
      static_cast<const DictSpace &>(from));
}


void DictSpace::MergeFrom(const DictSpace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3opengym.DictSpace)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  element_.MergeFrom(from.element_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DictSpace::CopyFrom(const DictSpace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3opengym.DictSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DictSpace::IsInitialized() const {
  return true;
}

void DictSpace::InternalSwap(DictSpace* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  element_.InternalSwap(&other->element_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DictSpace::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[4]);
}

// ===================================================================

class DataContainer::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Any& data(const DataContainer* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Any&
DataContainer::_Internal::data(const DataContainer* msg) {
  return *msg->data_;
}
void DataContainer::clear_data() {
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
DataContainer::DataContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ns3opengym.DataContainer)
}
DataContainer::DataContainer(const DataContainer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_data()) {
    data_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from.data_);
  } else {
    data_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:ns3opengym.DataContainer)
}

void DataContainer::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&data_)) + sizeof(type_));
}

DataContainer::~DataContainer() {
  // @@protoc_insertion_point(destructor:ns3opengym.DataContainer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DataContainer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void DataContainer::ArenaDtor(void* object) {
  DataContainer* _this = reinterpret_cast< DataContainer* >(object);
  (void)_this;
}
void DataContainer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataContainer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DataContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3opengym.DataContainer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataContainer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ns3opengym.SpaceType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::ns3opengym::SpaceType>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ns3opengym.DataContainer.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataContainer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3opengym.DataContainer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ns3opengym.SpaceType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .google.protobuf.Any data = 2;
  if (this->_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ns3opengym.DataContainer.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3opengym.DataContainer)
  return target;
}

size_t DataContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3opengym.DataContainer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.Any data = 2;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // .ns3opengym.SpaceType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataContainer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DataContainer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataContainer::GetClassData() const { return &_class_data_; }

void DataContainer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DataContainer *>(to)->MergeFrom(
      static_cast<const DataContainer &>(from));
}


void DataContainer::MergeFrom(const DataContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3opengym.DataContainer)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_data()) {
    _internal_mutable_data()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_data());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataContainer::CopyFrom(const DataContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3opengym.DataContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataContainer::IsInitialized() const {
  return true;
}

void DataContainer::InternalSwap(DataContainer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataContainer, type_)
      + sizeof(DataContainer::type_)
      - PROTOBUF_FIELD_OFFSET(DataContainer, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataContainer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[5]);
}

// ===================================================================

class DiscreteDataContainer::_Internal {
 public:
};

DiscreteDataContainer::DiscreteDataContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ns3opengym.DiscreteDataContainer)
}
DiscreteDataContainer::DiscreteDataContainer(const DiscreteDataContainer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_ = from.data_;
  // @@protoc_insertion_point(copy_constructor:ns3opengym.DiscreteDataContainer)
}

void DiscreteDataContainer::SharedCtor() {
data_ = 0;
}

DiscreteDataContainer::~DiscreteDataContainer() {
  // @@protoc_insertion_point(destructor:ns3opengym.DiscreteDataContainer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DiscreteDataContainer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DiscreteDataContainer::ArenaDtor(void* object) {
  DiscreteDataContainer* _this = reinterpret_cast< DiscreteDataContainer* >(object);
  (void)_this;
}
void DiscreteDataContainer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DiscreteDataContainer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DiscreteDataContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3opengym.DiscreteDataContainer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DiscreteDataContainer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DiscreteDataContainer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3opengym.DiscreteDataContainer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 data = 1;
  if (this->_internal_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3opengym.DiscreteDataContainer)
  return target;
}

size_t DiscreteDataContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3opengym.DiscreteDataContainer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 data = 1;
  if (this->_internal_data() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DiscreteDataContainer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DiscreteDataContainer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DiscreteDataContainer::GetClassData() const { return &_class_data_; }

void DiscreteDataContainer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DiscreteDataContainer *>(to)->MergeFrom(
      static_cast<const DiscreteDataContainer &>(from));
}


void DiscreteDataContainer::MergeFrom(const DiscreteDataContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3opengym.DiscreteDataContainer)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_data() != 0) {
    _internal_set_data(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DiscreteDataContainer::CopyFrom(const DiscreteDataContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3opengym.DiscreteDataContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscreteDataContainer::IsInitialized() const {
  return true;
}

void DiscreteDataContainer::InternalSwap(DiscreteDataContainer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DiscreteDataContainer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[6]);
}

// ===================================================================

class BoxDataContainer::_Internal {
 public:
};

BoxDataContainer::BoxDataContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  shape_(arena),
  intdata_(arena),
  uintdata_(arena),
  floatdata_(arena),
  doubledata_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ns3opengym.BoxDataContainer)
}
BoxDataContainer::BoxDataContainer(const BoxDataContainer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      shape_(from.shape_),
      intdata_(from.intdata_),
      uintdata_(from.uintdata_),
      floatdata_(from.floatdata_),
      doubledata_(from.doubledata_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dtype_ = from.dtype_;
  // @@protoc_insertion_point(copy_constructor:ns3opengym.BoxDataContainer)
}

void BoxDataContainer::SharedCtor() {
dtype_ = 0;
}

BoxDataContainer::~BoxDataContainer() {
  // @@protoc_insertion_point(destructor:ns3opengym.BoxDataContainer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BoxDataContainer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BoxDataContainer::ArenaDtor(void* object) {
  BoxDataContainer* _this = reinterpret_cast< BoxDataContainer* >(object);
  (void)_this;
}
void BoxDataContainer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoxDataContainer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BoxDataContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3opengym.BoxDataContainer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shape_.Clear();
  intdata_.Clear();
  uintdata_.Clear();
  floatdata_.Clear();
  doubledata_.Clear();
  dtype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoxDataContainer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ns3opengym.Dtype dtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dtype(static_cast<::ns3opengym::Dtype>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 shape = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_shape(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 intData = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_intdata(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_intdata(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 uintData = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_uintdata(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_uintdata(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float floatData = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_floatdata(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45) {
          _internal_add_floatdata(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated double doubleData = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_doubledata(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49) {
          _internal_add_doubledata(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BoxDataContainer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3opengym.BoxDataContainer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ns3opengym.Dtype dtype = 1;
  if (this->_internal_dtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_dtype(), target);
  }

  // repeated uint32 shape = 2;
  {
    int byte_size = _shape_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_shape(), byte_size, target);
    }
  }

  // repeated int32 intData = 3;
  {
    int byte_size = _intdata_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_intdata(), byte_size, target);
    }
  }

  // repeated uint32 uintData = 4;
  {
    int byte_size = _uintdata_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_uintdata(), byte_size, target);
    }
  }

  // repeated float floatData = 5;
  if (this->_internal_floatdata_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_floatdata(), target);
  }

  // repeated double doubleData = 6;
  if (this->_internal_doubledata_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_doubledata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3opengym.BoxDataContainer)
  return target;
}

size_t BoxDataContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3opengym.BoxDataContainer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 shape = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->shape_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _shape_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 intData = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->intdata_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _intdata_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 uintData = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->uintdata_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _uintdata_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float floatData = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_floatdata_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated double doubleData = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_doubledata_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // .ns3opengym.Dtype dtype = 1;
  if (this->_internal_dtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BoxDataContainer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BoxDataContainer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BoxDataContainer::GetClassData() const { return &_class_data_; }

void BoxDataContainer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BoxDataContainer *>(to)->MergeFrom(
      static_cast<const BoxDataContainer &>(from));
}


void BoxDataContainer::MergeFrom(const BoxDataContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3opengym.BoxDataContainer)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shape_.MergeFrom(from.shape_);
  intdata_.MergeFrom(from.intdata_);
  uintdata_.MergeFrom(from.uintdata_);
  floatdata_.MergeFrom(from.floatdata_);
  doubledata_.MergeFrom(from.doubledata_);
  if (from._internal_dtype() != 0) {
    _internal_set_dtype(from._internal_dtype());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BoxDataContainer::CopyFrom(const BoxDataContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3opengym.BoxDataContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoxDataContainer::IsInitialized() const {
  return true;
}

void BoxDataContainer::InternalSwap(BoxDataContainer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  shape_.InternalSwap(&other->shape_);
  intdata_.InternalSwap(&other->intdata_);
  uintdata_.InternalSwap(&other->uintdata_);
  floatdata_.InternalSwap(&other->floatdata_);
  doubledata_.InternalSwap(&other->doubledata_);
  swap(dtype_, other->dtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoxDataContainer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[7]);
}

// ===================================================================

class TupleDataContainer::_Internal {
 public:
};

TupleDataContainer::TupleDataContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  element_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ns3opengym.TupleDataContainer)
}
TupleDataContainer::TupleDataContainer(const TupleDataContainer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      element_(from.element_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ns3opengym.TupleDataContainer)
}

void TupleDataContainer::SharedCtor() {
}

TupleDataContainer::~TupleDataContainer() {
  // @@protoc_insertion_point(destructor:ns3opengym.TupleDataContainer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TupleDataContainer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TupleDataContainer::ArenaDtor(void* object) {
  TupleDataContainer* _this = reinterpret_cast< TupleDataContainer* >(object);
  (void)_this;
}
void TupleDataContainer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TupleDataContainer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TupleDataContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3opengym.TupleDataContainer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  element_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TupleDataContainer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ns3opengym.DataContainer element = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_element(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TupleDataContainer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3opengym.TupleDataContainer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ns3opengym.DataContainer element = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_element_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_element(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3opengym.TupleDataContainer)
  return target;
}

size_t TupleDataContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3opengym.TupleDataContainer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ns3opengym.DataContainer element = 1;
  total_size += 1UL * this->_internal_element_size();
  for (const auto& msg : this->element_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TupleDataContainer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TupleDataContainer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TupleDataContainer::GetClassData() const { return &_class_data_; }

void TupleDataContainer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TupleDataContainer *>(to)->MergeFrom(
      static_cast<const TupleDataContainer &>(from));
}


void TupleDataContainer::MergeFrom(const TupleDataContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3opengym.TupleDataContainer)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  element_.MergeFrom(from.element_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TupleDataContainer::CopyFrom(const TupleDataContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3opengym.TupleDataContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TupleDataContainer::IsInitialized() const {
  return true;
}

void TupleDataContainer::InternalSwap(TupleDataContainer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  element_.InternalSwap(&other->element_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TupleDataContainer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[8]);
}

// ===================================================================

class DictDataContainer::_Internal {
 public:
};

DictDataContainer::DictDataContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  element_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ns3opengym.DictDataContainer)
}
DictDataContainer::DictDataContainer(const DictDataContainer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      element_(from.element_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ns3opengym.DictDataContainer)
}

void DictDataContainer::SharedCtor() {
}

DictDataContainer::~DictDataContainer() {
  // @@protoc_insertion_point(destructor:ns3opengym.DictDataContainer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DictDataContainer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DictDataContainer::ArenaDtor(void* object) {
  DictDataContainer* _this = reinterpret_cast< DictDataContainer* >(object);
  (void)_this;
}
void DictDataContainer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DictDataContainer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DictDataContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3opengym.DictDataContainer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  element_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DictDataContainer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ns3opengym.DataContainer element = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_element(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DictDataContainer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3opengym.DictDataContainer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ns3opengym.DataContainer element = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_element_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_element(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3opengym.DictDataContainer)
  return target;
}

size_t DictDataContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3opengym.DictDataContainer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ns3opengym.DataContainer element = 1;
  total_size += 1UL * this->_internal_element_size();
  for (const auto& msg : this->element_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DictDataContainer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DictDataContainer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DictDataContainer::GetClassData() const { return &_class_data_; }

void DictDataContainer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DictDataContainer *>(to)->MergeFrom(
      static_cast<const DictDataContainer &>(from));
}


void DictDataContainer::MergeFrom(const DictDataContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3opengym.DictDataContainer)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  element_.MergeFrom(from.element_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DictDataContainer::CopyFrom(const DictDataContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3opengym.DictDataContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DictDataContainer::IsInitialized() const {
  return true;
}

void DictDataContainer::InternalSwap(DictDataContainer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  element_.InternalSwap(&other->element_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DictDataContainer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[9]);
}

// ===================================================================

class SimInitMsg::_Internal {
 public:
  static const ::ns3opengym::SpaceDescription& obsspace(const SimInitMsg* msg);
  static const ::ns3opengym::SpaceDescription& actspace(const SimInitMsg* msg);
};

const ::ns3opengym::SpaceDescription&
SimInitMsg::_Internal::obsspace(const SimInitMsg* msg) {
  return *msg->obsspace_;
}
const ::ns3opengym::SpaceDescription&
SimInitMsg::_Internal::actspace(const SimInitMsg* msg) {
  return *msg->actspace_;
}
SimInitMsg::SimInitMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ns3opengym.SimInitMsg)
}
SimInitMsg::SimInitMsg(const SimInitMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_obsspace()) {
    obsspace_ = new ::ns3opengym::SpaceDescription(*from.obsspace_);
  } else {
    obsspace_ = nullptr;
  }
  if (from._internal_has_actspace()) {
    actspace_ = new ::ns3opengym::SpaceDescription(*from.actspace_);
  } else {
    actspace_ = nullptr;
  }
  ::memcpy(&simprocessid_, &from.simprocessid_,
    static_cast<size_t>(reinterpret_cast<char*>(&wafshellprocessid_) -
    reinterpret_cast<char*>(&simprocessid_)) + sizeof(wafshellprocessid_));
  // @@protoc_insertion_point(copy_constructor:ns3opengym.SimInitMsg)
}

void SimInitMsg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&obsspace_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&wafshellprocessid_) -
    reinterpret_cast<char*>(&obsspace_)) + sizeof(wafshellprocessid_));
}

SimInitMsg::~SimInitMsg() {
  // @@protoc_insertion_point(destructor:ns3opengym.SimInitMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SimInitMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete obsspace_;
  if (this != internal_default_instance()) delete actspace_;
}

void SimInitMsg::ArenaDtor(void* object) {
  SimInitMsg* _this = reinterpret_cast< SimInitMsg* >(object);
  (void)_this;
}
void SimInitMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimInitMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SimInitMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3opengym.SimInitMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && obsspace_ != nullptr) {
    delete obsspace_;
  }
  obsspace_ = nullptr;
  if (GetArenaForAllocation() == nullptr && actspace_ != nullptr) {
    delete actspace_;
  }
  actspace_ = nullptr;
  ::memset(&simprocessid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wafshellprocessid_) -
      reinterpret_cast<char*>(&simprocessid_)) + sizeof(wafshellprocessid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimInitMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 simProcessId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          simprocessid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 wafShellProcessId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          wafshellprocessid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ns3opengym.SpaceDescription obsSpace = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_obsspace(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ns3opengym.SpaceDescription actSpace = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_actspace(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimInitMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3opengym.SimInitMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 simProcessId = 1;
  if (this->_internal_simprocessid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_simprocessid(), target);
  }

  // uint64 wafShellProcessId = 2;
  if (this->_internal_wafshellprocessid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_wafshellprocessid(), target);
  }

  // .ns3opengym.SpaceDescription obsSpace = 3;
  if (this->_internal_has_obsspace()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::obsspace(this), target, stream);
  }

  // .ns3opengym.SpaceDescription actSpace = 4;
  if (this->_internal_has_actspace()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::actspace(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3opengym.SimInitMsg)
  return target;
}

size_t SimInitMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3opengym.SimInitMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ns3opengym.SpaceDescription obsSpace = 3;
  if (this->_internal_has_obsspace()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *obsspace_);
  }

  // .ns3opengym.SpaceDescription actSpace = 4;
  if (this->_internal_has_actspace()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *actspace_);
  }

  // uint64 simProcessId = 1;
  if (this->_internal_simprocessid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_simprocessid());
  }

  // uint64 wafShellProcessId = 2;
  if (this->_internal_wafshellprocessid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_wafshellprocessid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimInitMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SimInitMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimInitMsg::GetClassData() const { return &_class_data_; }

void SimInitMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SimInitMsg *>(to)->MergeFrom(
      static_cast<const SimInitMsg &>(from));
}


void SimInitMsg::MergeFrom(const SimInitMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3opengym.SimInitMsg)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_obsspace()) {
    _internal_mutable_obsspace()->::ns3opengym::SpaceDescription::MergeFrom(from._internal_obsspace());
  }
  if (from._internal_has_actspace()) {
    _internal_mutable_actspace()->::ns3opengym::SpaceDescription::MergeFrom(from._internal_actspace());
  }
  if (from._internal_simprocessid() != 0) {
    _internal_set_simprocessid(from._internal_simprocessid());
  }
  if (from._internal_wafshellprocessid() != 0) {
    _internal_set_wafshellprocessid(from._internal_wafshellprocessid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimInitMsg::CopyFrom(const SimInitMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3opengym.SimInitMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimInitMsg::IsInitialized() const {
  return true;
}

void SimInitMsg::InternalSwap(SimInitMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimInitMsg, wafshellprocessid_)
      + sizeof(SimInitMsg::wafshellprocessid_)
      - PROTOBUF_FIELD_OFFSET(SimInitMsg, obsspace_)>(
          reinterpret_cast<char*>(&obsspace_),
          reinterpret_cast<char*>(&other->obsspace_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimInitMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[10]);
}

// ===================================================================

class SimInitAck::_Internal {
 public:
};

SimInitAck::SimInitAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ns3opengym.SimInitAck)
}
SimInitAck::SimInitAck(const SimInitAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&done_, &from.done_,
    static_cast<size_t>(reinterpret_cast<char*>(&stopsimreq_) -
    reinterpret_cast<char*>(&done_)) + sizeof(stopsimreq_));
  // @@protoc_insertion_point(copy_constructor:ns3opengym.SimInitAck)
}

void SimInitAck::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&done_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stopsimreq_) -
    reinterpret_cast<char*>(&done_)) + sizeof(stopsimreq_));
}

SimInitAck::~SimInitAck() {
  // @@protoc_insertion_point(destructor:ns3opengym.SimInitAck)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SimInitAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SimInitAck::ArenaDtor(void* object) {
  SimInitAck* _this = reinterpret_cast< SimInitAck* >(object);
  (void)_this;
}
void SimInitAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimInitAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SimInitAck::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3opengym.SimInitAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&done_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stopsimreq_) -
      reinterpret_cast<char*>(&done_)) + sizeof(stopsimreq_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimInitAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool done = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          done_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool stopSimReq = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          stopsimreq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimInitAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3opengym.SimInitAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool done = 1;
  if (this->_internal_done() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_done(), target);
  }

  // bool stopSimReq = 2;
  if (this->_internal_stopsimreq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_stopsimreq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3opengym.SimInitAck)
  return target;
}

size_t SimInitAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3opengym.SimInitAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool done = 1;
  if (this->_internal_done() != 0) {
    total_size += 1 + 1;
  }

  // bool stopSimReq = 2;
  if (this->_internal_stopsimreq() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimInitAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SimInitAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimInitAck::GetClassData() const { return &_class_data_; }

void SimInitAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SimInitAck *>(to)->MergeFrom(
      static_cast<const SimInitAck &>(from));
}


void SimInitAck::MergeFrom(const SimInitAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3opengym.SimInitAck)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_done() != 0) {
    _internal_set_done(from._internal_done());
  }
  if (from._internal_stopsimreq() != 0) {
    _internal_set_stopsimreq(from._internal_stopsimreq());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimInitAck::CopyFrom(const SimInitAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3opengym.SimInitAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimInitAck::IsInitialized() const {
  return true;
}

void SimInitAck::InternalSwap(SimInitAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimInitAck, stopsimreq_)
      + sizeof(SimInitAck::stopsimreq_)
      - PROTOBUF_FIELD_OFFSET(SimInitAck, done_)>(
          reinterpret_cast<char*>(&done_),
          reinterpret_cast<char*>(&other->done_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimInitAck::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[11]);
}

// ===================================================================

class EnvStateMsg::_Internal {
 public:
  static const ::ns3opengym::DataContainer& obsdata(const EnvStateMsg* msg);
};

const ::ns3opengym::DataContainer&
EnvStateMsg::_Internal::obsdata(const EnvStateMsg* msg) {
  return *msg->obsdata_;
}
EnvStateMsg::EnvStateMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ns3opengym.EnvStateMsg)
}
EnvStateMsg::EnvStateMsg(const EnvStateMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_info().empty()) {
    info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_info(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_obsdata()) {
    obsdata_ = new ::ns3opengym::DataContainer(*from.obsdata_);
  } else {
    obsdata_ = nullptr;
  }
  ::memcpy(&reward_, &from.reward_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&reward_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:ns3opengym.EnvStateMsg)
}

void EnvStateMsg::SharedCtor() {
info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&obsdata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&obsdata_)) + sizeof(reason_));
}

EnvStateMsg::~EnvStateMsg() {
  // @@protoc_insertion_point(destructor:ns3opengym.EnvStateMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EnvStateMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete obsdata_;
}

void EnvStateMsg::ArenaDtor(void* object) {
  EnvStateMsg* _this = reinterpret_cast< EnvStateMsg* >(object);
  (void)_this;
}
void EnvStateMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnvStateMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EnvStateMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3opengym.EnvStateMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && obsdata_ != nullptr) {
    delete obsdata_;
  }
  obsdata_ = nullptr;
  ::memset(&reward_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&reward_)) + sizeof(reason_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnvStateMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ns3opengym.DataContainer obsData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_obsdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float reward = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          reward_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool isGameOver = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          isgameover_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ns3opengym.EnvStateMsg.Reason reason = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reason(static_cast<::ns3opengym::EnvStateMsg_Reason>(val));
        } else
          goto handle_unusual;
        continue;
      // string info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ns3opengym.EnvStateMsg.info"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnvStateMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3opengym.EnvStateMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ns3opengym.DataContainer obsData = 1;
  if (this->_internal_has_obsdata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::obsdata(this), target, stream);
  }

  // float reward = 2;
  if (!(this->_internal_reward() <= 0 && this->_internal_reward() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_reward(), target);
  }

  // bool isGameOver = 3;
  if (this->_internal_isgameover() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_isgameover(), target);
  }

  // .ns3opengym.EnvStateMsg.Reason reason = 4;
  if (this->_internal_reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_reason(), target);
  }

  // string info = 5;
  if (!this->_internal_info().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_info().data(), static_cast<int>(this->_internal_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ns3opengym.EnvStateMsg.info");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3opengym.EnvStateMsg)
  return target;
}

size_t EnvStateMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3opengym.EnvStateMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string info = 5;
  if (!this->_internal_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_info());
  }

  // .ns3opengym.DataContainer obsData = 1;
  if (this->_internal_has_obsdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *obsdata_);
  }

  // float reward = 2;
  if (!(this->_internal_reward() <= 0 && this->_internal_reward() >= 0)) {
    total_size += 1 + 4;
  }

  // bool isGameOver = 3;
  if (this->_internal_isgameover() != 0) {
    total_size += 1 + 1;
  }

  // .ns3opengym.EnvStateMsg.Reason reason = 4;
  if (this->_internal_reason() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reason());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnvStateMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EnvStateMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnvStateMsg::GetClassData() const { return &_class_data_; }

void EnvStateMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EnvStateMsg *>(to)->MergeFrom(
      static_cast<const EnvStateMsg &>(from));
}


void EnvStateMsg::MergeFrom(const EnvStateMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3opengym.EnvStateMsg)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_info().empty()) {
    _internal_set_info(from._internal_info());
  }
  if (from._internal_has_obsdata()) {
    _internal_mutable_obsdata()->::ns3opengym::DataContainer::MergeFrom(from._internal_obsdata());
  }
  if (!(from._internal_reward() <= 0 && from._internal_reward() >= 0)) {
    _internal_set_reward(from._internal_reward());
  }
  if (from._internal_isgameover() != 0) {
    _internal_set_isgameover(from._internal_isgameover());
  }
  if (from._internal_reason() != 0) {
    _internal_set_reason(from._internal_reason());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnvStateMsg::CopyFrom(const EnvStateMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3opengym.EnvStateMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvStateMsg::IsInitialized() const {
  return true;
}

void EnvStateMsg::InternalSwap(EnvStateMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &info_, lhs_arena,
      &other->info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EnvStateMsg, reason_)
      + sizeof(EnvStateMsg::reason_)
      - PROTOBUF_FIELD_OFFSET(EnvStateMsg, obsdata_)>(
          reinterpret_cast<char*>(&obsdata_),
          reinterpret_cast<char*>(&other->obsdata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EnvStateMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[12]);
}

// ===================================================================

class EnvActMsg::_Internal {
 public:
  static const ::ns3opengym::DataContainer& actdata(const EnvActMsg* msg);
};

const ::ns3opengym::DataContainer&
EnvActMsg::_Internal::actdata(const EnvActMsg* msg) {
  return *msg->actdata_;
}
EnvActMsg::EnvActMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ns3opengym.EnvActMsg)
}
EnvActMsg::EnvActMsg(const EnvActMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_actdata()) {
    actdata_ = new ::ns3opengym::DataContainer(*from.actdata_);
  } else {
    actdata_ = nullptr;
  }
  stopsimreq_ = from.stopsimreq_;
  // @@protoc_insertion_point(copy_constructor:ns3opengym.EnvActMsg)
}

void EnvActMsg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&actdata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stopsimreq_) -
    reinterpret_cast<char*>(&actdata_)) + sizeof(stopsimreq_));
}

EnvActMsg::~EnvActMsg() {
  // @@protoc_insertion_point(destructor:ns3opengym.EnvActMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EnvActMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete actdata_;
}

void EnvActMsg::ArenaDtor(void* object) {
  EnvActMsg* _this = reinterpret_cast< EnvActMsg* >(object);
  (void)_this;
}
void EnvActMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnvActMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EnvActMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3opengym.EnvActMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && actdata_ != nullptr) {
    delete actdata_;
  }
  actdata_ = nullptr;
  stopsimreq_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnvActMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ns3opengym.DataContainer actData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_actdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool stopSimReq = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          stopsimreq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnvActMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3opengym.EnvActMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ns3opengym.DataContainer actData = 1;
  if (this->_internal_has_actdata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::actdata(this), target, stream);
  }

  // bool stopSimReq = 2;
  if (this->_internal_stopsimreq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_stopsimreq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3opengym.EnvActMsg)
  return target;
}

size_t EnvActMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3opengym.EnvActMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ns3opengym.DataContainer actData = 1;
  if (this->_internal_has_actdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *actdata_);
  }

  // bool stopSimReq = 2;
  if (this->_internal_stopsimreq() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnvActMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EnvActMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnvActMsg::GetClassData() const { return &_class_data_; }

void EnvActMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EnvActMsg *>(to)->MergeFrom(
      static_cast<const EnvActMsg &>(from));
}


void EnvActMsg::MergeFrom(const EnvActMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3opengym.EnvActMsg)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_actdata()) {
    _internal_mutable_actdata()->::ns3opengym::DataContainer::MergeFrom(from._internal_actdata());
  }
  if (from._internal_stopsimreq() != 0) {
    _internal_set_stopsimreq(from._internal_stopsimreq());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnvActMsg::CopyFrom(const EnvActMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3opengym.EnvActMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvActMsg::IsInitialized() const {
  return true;
}

void EnvActMsg::InternalSwap(EnvActMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EnvActMsg, stopsimreq_)
      + sizeof(EnvActMsg::stopsimreq_)
      - PROTOBUF_FIELD_OFFSET(EnvActMsg, actdata_)>(
          reinterpret_cast<char*>(&actdata_),
          reinterpret_cast<char*>(&other->actdata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EnvActMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[13]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ns3opengym
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ns3opengym::SpaceDescription* Arena::CreateMaybeMessage< ::ns3opengym::SpaceDescription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns3opengym::SpaceDescription >(arena);
}
template<> PROTOBUF_NOINLINE ::ns3opengym::DiscreteSpace* Arena::CreateMaybeMessage< ::ns3opengym::DiscreteSpace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns3opengym::DiscreteSpace >(arena);
}
template<> PROTOBUF_NOINLINE ::ns3opengym::BoxSpace* Arena::CreateMaybeMessage< ::ns3opengym::BoxSpace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns3opengym::BoxSpace >(arena);
}
template<> PROTOBUF_NOINLINE ::ns3opengym::TupleSpace* Arena::CreateMaybeMessage< ::ns3opengym::TupleSpace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns3opengym::TupleSpace >(arena);
}
template<> PROTOBUF_NOINLINE ::ns3opengym::DictSpace* Arena::CreateMaybeMessage< ::ns3opengym::DictSpace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns3opengym::DictSpace >(arena);
}
template<> PROTOBUF_NOINLINE ::ns3opengym::DataContainer* Arena::CreateMaybeMessage< ::ns3opengym::DataContainer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns3opengym::DataContainer >(arena);
}
template<> PROTOBUF_NOINLINE ::ns3opengym::DiscreteDataContainer* Arena::CreateMaybeMessage< ::ns3opengym::DiscreteDataContainer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns3opengym::DiscreteDataContainer >(arena);
}
template<> PROTOBUF_NOINLINE ::ns3opengym::BoxDataContainer* Arena::CreateMaybeMessage< ::ns3opengym::BoxDataContainer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns3opengym::BoxDataContainer >(arena);
}
template<> PROTOBUF_NOINLINE ::ns3opengym::TupleDataContainer* Arena::CreateMaybeMessage< ::ns3opengym::TupleDataContainer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns3opengym::TupleDataContainer >(arena);
}
template<> PROTOBUF_NOINLINE ::ns3opengym::DictDataContainer* Arena::CreateMaybeMessage< ::ns3opengym::DictDataContainer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns3opengym::DictDataContainer >(arena);
}
template<> PROTOBUF_NOINLINE ::ns3opengym::SimInitMsg* Arena::CreateMaybeMessage< ::ns3opengym::SimInitMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns3opengym::SimInitMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::ns3opengym::SimInitAck* Arena::CreateMaybeMessage< ::ns3opengym::SimInitAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns3opengym::SimInitAck >(arena);
}
template<> PROTOBUF_NOINLINE ::ns3opengym::EnvStateMsg* Arena::CreateMaybeMessage< ::ns3opengym::EnvStateMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns3opengym::EnvStateMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::ns3opengym::EnvActMsg* Arena::CreateMaybeMessage< ::ns3opengym::EnvActMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns3opengym::EnvActMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
